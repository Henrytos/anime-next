"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/embla-carousel";
exports.ids = ["vendor-chunks/embla-carousel"];
exports.modules = {

/***/ "(ssr)/./node_modules/embla-carousel/esm/embla-carousel.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/embla-carousel/esm/embla-carousel.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EmblaCarousel)\n/* harmony export */ });\nfunction isNumber(subject) {\n    return typeof subject === \"number\";\n}\nfunction isString(subject) {\n    return typeof subject === \"string\";\n}\nfunction isBoolean(subject) {\n    return typeof subject === \"boolean\";\n}\nfunction isObject(subject) {\n    return Object.prototype.toString.call(subject) === \"[object Object]\";\n}\nfunction mathAbs(n) {\n    return Math.abs(n);\n}\nfunction mathSign(n) {\n    return Math.sign(n);\n}\nfunction deltaAbs(valueB, valueA) {\n    return mathAbs(valueB - valueA);\n}\nfunction factorAbs(valueB, valueA) {\n    if (valueB === 0 || valueA === 0) return 0;\n    if (mathAbs(valueB) <= mathAbs(valueA)) return 0;\n    const diff = deltaAbs(mathAbs(valueB), mathAbs(valueA));\n    return mathAbs(diff / valueB);\n}\nfunction arrayKeys(array) {\n    return objectKeys(array).map(Number);\n}\nfunction arrayLast(array) {\n    return array[arrayLastIndex(array)];\n}\nfunction arrayLastIndex(array) {\n    return Math.max(0, array.length - 1);\n}\nfunction arrayIsLastIndex(array, index) {\n    return index === arrayLastIndex(array);\n}\nfunction arrayFromNumber(n, startAt = 0) {\n    return Array.from(Array(n), (_, i)=>startAt + i);\n}\nfunction objectKeys(object) {\n    return Object.keys(object);\n}\nfunction objectsMergeDeep(objectA, objectB) {\n    return [\n        objectA,\n        objectB\n    ].reduce((mergedObjects, currentObject)=>{\n        objectKeys(currentObject).forEach((key)=>{\n            const valueA = mergedObjects[key];\n            const valueB = currentObject[key];\n            const areObjects = isObject(valueA) && isObject(valueB);\n            mergedObjects[key] = areObjects ? objectsMergeDeep(valueA, valueB) : valueB;\n        });\n        return mergedObjects;\n    }, {});\n}\nfunction isMouseEvent(evt, ownerWindow) {\n    return typeof ownerWindow.MouseEvent !== \"undefined\" && evt instanceof ownerWindow.MouseEvent;\n}\nfunction Alignment(align, viewSize) {\n    const predefined = {\n        start,\n        center,\n        end\n    };\n    function start() {\n        return 0;\n    }\n    function center(n) {\n        return end(n) / 2;\n    }\n    function end(n) {\n        return viewSize - n;\n    }\n    function measure(n, index) {\n        if (isString(align)) return predefined[align](n);\n        return align(viewSize, n, index);\n    }\n    const self = {\n        measure\n    };\n    return self;\n}\nfunction EventStore() {\n    let listeners = [];\n    function add(node, type, handler, options = {\n        passive: true\n    }) {\n        let removeListener;\n        if (\"addEventListener\" in node) {\n            node.addEventListener(type, handler, options);\n            removeListener = ()=>node.removeEventListener(type, handler, options);\n        } else {\n            const legacyMediaQueryList = node;\n            legacyMediaQueryList.addListener(handler);\n            removeListener = ()=>legacyMediaQueryList.removeListener(handler);\n        }\n        listeners.push(removeListener);\n        return self;\n    }\n    function clear() {\n        listeners = listeners.filter((remove)=>remove());\n    }\n    const self = {\n        add,\n        clear\n    };\n    return self;\n}\nfunction Animations(ownerDocument, ownerWindow, update, render) {\n    const documentVisibleHandler = EventStore();\n    const timeStep = 1000 / 60;\n    let lastTimeStamp = null;\n    let lag = 0;\n    let animationFrame = 0;\n    function init() {\n        documentVisibleHandler.add(ownerDocument, \"visibilitychange\", ()=>{\n            if (ownerDocument.hidden) reset();\n        });\n    }\n    function destroy() {\n        stop();\n        documentVisibleHandler.clear();\n    }\n    function animate(timeStamp) {\n        if (!lastTimeStamp) lastTimeStamp = timeStamp;\n        const elapsed = timeStamp - lastTimeStamp;\n        lastTimeStamp = timeStamp;\n        lag += elapsed;\n        while(lag >= timeStep){\n            update();\n            lag -= timeStep;\n        }\n        const lagOffset = mathAbs(lag / timeStep);\n        render(lagOffset);\n        if (animationFrame) ownerWindow.requestAnimationFrame(animate);\n    }\n    function start() {\n        if (animationFrame) return;\n        animationFrame = ownerWindow.requestAnimationFrame(animate);\n    }\n    function stop() {\n        ownerWindow.cancelAnimationFrame(animationFrame);\n        lastTimeStamp = null;\n        lag = 0;\n        animationFrame = 0;\n    }\n    function reset() {\n        lastTimeStamp = null;\n        lag = 0;\n    }\n    const self = {\n        init,\n        destroy,\n        start,\n        stop,\n        update,\n        render\n    };\n    return self;\n}\nfunction Axis(axis, direction) {\n    const scroll = axis === \"y\" ? \"y\" : \"x\";\n    const cross = axis === \"y\" ? \"x\" : \"y\";\n    const startEdge = getStartEdge();\n    const endEdge = getEndEdge();\n    function measureSize(nodeRect) {\n        const { width, height } = nodeRect;\n        return scroll === \"x\" ? width : height;\n    }\n    function getStartEdge() {\n        if (scroll === \"y\") return \"top\";\n        return direction === \"rtl\" ? \"right\" : \"left\";\n    }\n    function getEndEdge() {\n        if (scroll === \"y\") return \"bottom\";\n        return direction === \"rtl\" ? \"left\" : \"right\";\n    }\n    const self = {\n        scroll,\n        cross,\n        startEdge,\n        endEdge,\n        measureSize\n    };\n    return self;\n}\nfunction Limit(min = 0, max = 0) {\n    const length = mathAbs(min - max);\n    function reachedMin(n) {\n        return n < min;\n    }\n    function reachedMax(n) {\n        return n > max;\n    }\n    function reachedAny(n) {\n        return reachedMin(n) || reachedMax(n);\n    }\n    function constrain(n) {\n        if (!reachedAny(n)) return n;\n        return reachedMin(n) ? min : max;\n    }\n    function removeOffset(n) {\n        if (!length) return n;\n        return n - length * Math.ceil((n - max) / length);\n    }\n    const self = {\n        length,\n        max,\n        min,\n        constrain,\n        reachedAny,\n        reachedMax,\n        reachedMin,\n        removeOffset\n    };\n    return self;\n}\nfunction Counter(max, start, loop) {\n    const { constrain } = Limit(0, max);\n    const loopEnd = max + 1;\n    let counter = withinLimit(start);\n    function withinLimit(n) {\n        return !loop ? constrain(n) : mathAbs((loopEnd + n) % loopEnd);\n    }\n    function get() {\n        return counter;\n    }\n    function set(n) {\n        counter = withinLimit(n);\n        return self;\n    }\n    function add(n) {\n        return clone().set(get() + n);\n    }\n    function clone() {\n        return Counter(max, get(), loop);\n    }\n    const self = {\n        get,\n        set,\n        add,\n        clone\n    };\n    return self;\n}\nfunction Direction(direction) {\n    const sign = direction === \"rtl\" ? -1 : 1;\n    function apply(n) {\n        return n * sign;\n    }\n    const self = {\n        apply\n    };\n    return self;\n}\nfunction DragHandler(axis, direction, rootNode, ownerDocument, ownerWindow, target, dragTracker, location, animation, scrollTo, scrollBody, scrollTarget, index, eventHandler, percentOfView, dragFree, dragThreshold, skipSnaps, baseFriction, watchDrag) {\n    const { cross: crossAxis } = axis;\n    const focusNodes = [\n        \"INPUT\",\n        \"SELECT\",\n        \"TEXTAREA\"\n    ];\n    const nonPassiveEvent = {\n        passive: false\n    };\n    const initEvents = EventStore();\n    const dragEvents = EventStore();\n    const goToNextThreshold = Limit(50, 225).constrain(percentOfView.measure(20));\n    const snapForceBoost = {\n        mouse: 300,\n        touch: 400\n    };\n    const freeForceBoost = {\n        mouse: 500,\n        touch: 600\n    };\n    const baseSpeed = dragFree ? 43 : 25;\n    let isMoving = false;\n    let startScroll = 0;\n    let startCross = 0;\n    let pointerIsDown = false;\n    let preventScroll = false;\n    let preventClick = false;\n    let isMouse = false;\n    function init(emblaApi) {\n        if (!watchDrag) return;\n        function downIfAllowed(evt) {\n            if (isBoolean(watchDrag) || watchDrag(emblaApi, evt)) down(evt);\n        }\n        const node = rootNode;\n        initEvents.add(node, \"dragstart\", (evt)=>evt.preventDefault(), nonPassiveEvent).add(node, \"touchmove\", ()=>undefined, nonPassiveEvent).add(node, \"touchend\", ()=>undefined).add(node, \"touchstart\", downIfAllowed).add(node, \"mousedown\", downIfAllowed).add(node, \"touchcancel\", up).add(node, \"contextmenu\", up).add(node, \"click\", click, true);\n    }\n    function destroy() {\n        initEvents.clear();\n        dragEvents.clear();\n    }\n    function addDragEvents() {\n        const node = isMouse ? ownerDocument : rootNode;\n        dragEvents.add(node, \"touchmove\", move, nonPassiveEvent).add(node, \"touchend\", up).add(node, \"mousemove\", move, nonPassiveEvent).add(node, \"mouseup\", up);\n    }\n    function isFocusNode(node) {\n        const nodeName = node.nodeName || \"\";\n        return focusNodes.includes(nodeName);\n    }\n    function forceBoost() {\n        const boost = dragFree ? freeForceBoost : snapForceBoost;\n        const type = isMouse ? \"mouse\" : \"touch\";\n        return boost[type];\n    }\n    function allowedForce(force, targetChanged) {\n        const next = index.add(mathSign(force) * -1);\n        const baseForce = scrollTarget.byDistance(force, !dragFree).distance;\n        if (dragFree || mathAbs(force) < goToNextThreshold) return baseForce;\n        if (skipSnaps && targetChanged) return baseForce * 0.5;\n        return scrollTarget.byIndex(next.get(), 0).distance;\n    }\n    function down(evt) {\n        const isMouseEvt = isMouseEvent(evt, ownerWindow);\n        isMouse = isMouseEvt;\n        if (isMouseEvt && evt.button !== 0) return;\n        if (isFocusNode(evt.target)) return;\n        preventClick = dragFree && isMouseEvt && !evt.buttons && isMoving;\n        isMoving = deltaAbs(target.get(), location.get()) >= 2;\n        pointerIsDown = true;\n        dragTracker.pointerDown(evt);\n        scrollBody.useFriction(0).useDuration(0);\n        target.set(location);\n        addDragEvents();\n        startScroll = dragTracker.readPoint(evt);\n        startCross = dragTracker.readPoint(evt, crossAxis);\n        eventHandler.emit(\"pointerDown\");\n    }\n    function move(evt) {\n        const lastScroll = dragTracker.readPoint(evt);\n        const lastCross = dragTracker.readPoint(evt, crossAxis);\n        const diffScroll = deltaAbs(lastScroll, startScroll);\n        const diffCross = deltaAbs(lastCross, startCross);\n        if (!preventScroll && !isMouse) {\n            if (!evt.cancelable) return up(evt);\n            preventScroll = diffScroll > diffCross;\n            if (!preventScroll) return up(evt);\n        }\n        const diff = dragTracker.pointerMove(evt);\n        if (diffScroll > dragThreshold) preventClick = true;\n        scrollBody.useFriction(0.3).useDuration(1);\n        animation.start();\n        target.add(direction.apply(diff));\n        evt.preventDefault();\n    }\n    function up(evt) {\n        const currentLocation = scrollTarget.byDistance(0, false);\n        const targetChanged = currentLocation.index !== index.get();\n        const rawForce = dragTracker.pointerUp(evt) * forceBoost();\n        const force = allowedForce(direction.apply(rawForce), targetChanged);\n        const forceFactor = factorAbs(rawForce, force);\n        const speed = baseSpeed - 10 * forceFactor;\n        const friction = baseFriction + forceFactor / 50;\n        preventScroll = false;\n        pointerIsDown = false;\n        dragEvents.clear();\n        scrollBody.useDuration(speed).useFriction(friction);\n        scrollTo.distance(force, !dragFree);\n        isMouse = false;\n        eventHandler.emit(\"pointerUp\");\n    }\n    function click(evt) {\n        if (preventClick) {\n            evt.stopPropagation();\n            evt.preventDefault();\n        }\n    }\n    function pointerDown() {\n        return pointerIsDown;\n    }\n    const self = {\n        init,\n        pointerDown,\n        destroy\n    };\n    return self;\n}\nfunction DragTracker(axis, ownerWindow) {\n    const logInterval = 170;\n    let startEvent;\n    let lastEvent;\n    function readTime(evt) {\n        return evt.timeStamp;\n    }\n    function readPoint(evt, evtAxis) {\n        const property = evtAxis || axis.scroll;\n        const coord = `client${property === \"x\" ? \"X\" : \"Y\"}`;\n        return (isMouseEvent(evt, ownerWindow) ? evt : evt.touches[0])[coord];\n    }\n    function pointerDown(evt) {\n        startEvent = evt;\n        lastEvent = evt;\n        return readPoint(evt);\n    }\n    function pointerMove(evt) {\n        const diff = readPoint(evt) - readPoint(lastEvent);\n        const expired = readTime(evt) - readTime(startEvent) > logInterval;\n        lastEvent = evt;\n        if (expired) startEvent = evt;\n        return diff;\n    }\n    function pointerUp(evt) {\n        if (!startEvent || !lastEvent) return 0;\n        const diffDrag = readPoint(lastEvent) - readPoint(startEvent);\n        const diffTime = readTime(evt) - readTime(startEvent);\n        const expired = readTime(evt) - readTime(lastEvent) > logInterval;\n        const force = diffDrag / diffTime;\n        const isFlick = diffTime && !expired && mathAbs(force) > 0.1;\n        return isFlick ? force : 0;\n    }\n    const self = {\n        pointerDown,\n        pointerMove,\n        pointerUp,\n        readPoint\n    };\n    return self;\n}\nfunction NodeRects() {\n    function measure(node) {\n        const { offsetTop, offsetLeft, offsetWidth, offsetHeight } = node;\n        const offset = {\n            top: offsetTop,\n            right: offsetLeft + offsetWidth,\n            bottom: offsetTop + offsetHeight,\n            left: offsetLeft,\n            width: offsetWidth,\n            height: offsetHeight\n        };\n        return offset;\n    }\n    const self = {\n        measure\n    };\n    return self;\n}\nfunction PercentOfView(viewSize) {\n    function measure(n) {\n        return viewSize * (n / 100);\n    }\n    const self = {\n        measure\n    };\n    return self;\n}\nfunction ResizeHandler(container, eventHandler, ownerWindow, slides, axis, watchResize, nodeRects) {\n    let resizeObserver;\n    let containerSize;\n    let slideSizes = [];\n    let destroyed = false;\n    function readSize(node) {\n        return axis.measureSize(nodeRects.measure(node));\n    }\n    function init(emblaApi) {\n        if (!watchResize) return;\n        containerSize = readSize(container);\n        slideSizes = slides.map(readSize);\n        function defaultCallback(entries) {\n            for (const entry of entries){\n                const isContainer = entry.target === container;\n                const slideIndex = slides.indexOf(entry.target);\n                const lastSize = isContainer ? containerSize : slideSizes[slideIndex];\n                const newSize = readSize(isContainer ? container : slides[slideIndex]);\n                const diffSize = mathAbs(newSize - lastSize);\n                if (diffSize >= 0.5) {\n                    ownerWindow.requestAnimationFrame(()=>{\n                        emblaApi.reInit();\n                        eventHandler.emit(\"resize\");\n                    });\n                    break;\n                }\n            }\n        }\n        resizeObserver = new ResizeObserver((entries)=>{\n            if (destroyed) return;\n            if (isBoolean(watchResize) || watchResize(emblaApi, entries)) {\n                defaultCallback(entries);\n            }\n        });\n        const observeNodes = [\n            container\n        ].concat(slides);\n        observeNodes.forEach((node)=>resizeObserver.observe(node));\n    }\n    function destroy() {\n        if (resizeObserver) resizeObserver.disconnect();\n        destroyed = true;\n    }\n    const self = {\n        init,\n        destroy\n    };\n    return self;\n}\nfunction ScrollBody(location, offsetLocation, target, baseDuration, baseFriction) {\n    let bodyVelocity = 0;\n    let scrollDirection = 0;\n    let scrollDuration = baseDuration;\n    let scrollFriction = baseFriction;\n    let rawLocation = location.get();\n    let rawLocationPrevious = 0;\n    function seek() {\n        const diff = target.get() - location.get();\n        const isInstant = !scrollDuration;\n        let directionDiff = 0;\n        if (isInstant) {\n            bodyVelocity = 0;\n            location.set(target);\n            directionDiff = diff;\n        } else {\n            bodyVelocity += diff / scrollDuration;\n            bodyVelocity *= scrollFriction;\n            rawLocation += bodyVelocity;\n            location.add(bodyVelocity);\n            directionDiff = rawLocation - rawLocationPrevious;\n        }\n        scrollDirection = mathSign(directionDiff);\n        rawLocationPrevious = rawLocation;\n        return self;\n    }\n    function settled() {\n        const diff = target.get() - offsetLocation.get();\n        return mathAbs(diff) < 0.001;\n    }\n    function duration() {\n        return scrollDuration;\n    }\n    function direction() {\n        return scrollDirection;\n    }\n    function velocity() {\n        return bodyVelocity;\n    }\n    function useBaseDuration() {\n        return useDuration(baseDuration);\n    }\n    function useBaseFriction() {\n        return useFriction(baseFriction);\n    }\n    function useDuration(n) {\n        scrollDuration = n;\n        return self;\n    }\n    function useFriction(n) {\n        scrollFriction = n;\n        return self;\n    }\n    const self = {\n        direction,\n        duration,\n        velocity,\n        seek,\n        settled,\n        useBaseFriction,\n        useBaseDuration,\n        useFriction,\n        useDuration\n    };\n    return self;\n}\nfunction ScrollBounds(limit, location, target, scrollBody, percentOfView) {\n    const pullBackThreshold = percentOfView.measure(10);\n    const edgeOffsetTolerance = percentOfView.measure(50);\n    const frictionLimit = Limit(0.1, 0.99);\n    let disabled = false;\n    function shouldConstrain() {\n        if (disabled) return false;\n        if (!limit.reachedAny(target.get())) return false;\n        if (!limit.reachedAny(location.get())) return false;\n        return true;\n    }\n    function constrain(pointerDown) {\n        if (!shouldConstrain()) return;\n        const edge = limit.reachedMin(location.get()) ? \"min\" : \"max\";\n        const diffToEdge = mathAbs(limit[edge] - location.get());\n        const diffToTarget = target.get() - location.get();\n        const friction = frictionLimit.constrain(diffToEdge / edgeOffsetTolerance);\n        target.subtract(diffToTarget * friction);\n        if (!pointerDown && mathAbs(diffToTarget) < pullBackThreshold) {\n            target.set(limit.constrain(target.get()));\n            scrollBody.useDuration(25).useBaseFriction();\n        }\n    }\n    function toggleActive(active) {\n        disabled = !active;\n    }\n    const self = {\n        constrain,\n        toggleActive\n    };\n    return self;\n}\nfunction ScrollContain(viewSize, contentSize, snapsAligned, containScroll, pixelTolerance) {\n    const scrollBounds = Limit(-contentSize + viewSize, 0);\n    const snapsBounded = measureBounded();\n    const scrollContainLimit = findScrollContainLimit();\n    const snapsContained = measureContained();\n    function findScrollContainLimit() {\n        const startSnap = snapsBounded[0];\n        const endSnap = arrayLast(snapsBounded);\n        const min = snapsBounded.lastIndexOf(startSnap);\n        const max = snapsBounded.indexOf(endSnap) + 1;\n        return Limit(min, max);\n    }\n    function measureBounded() {\n        return snapsAligned.map((snapAligned, index)=>{\n            const isFirst = !index;\n            const isLast = arrayIsLastIndex(snapsAligned, index);\n            if (isFirst) return scrollBounds.max;\n            if (isLast) return scrollBounds.min;\n            return scrollBounds.constrain(snapAligned);\n        }).map((scrollBound)=>parseFloat(scrollBound.toFixed(3)));\n    }\n    function measureContained() {\n        if (contentSize <= viewSize + pixelTolerance) return [\n            scrollBounds.max\n        ];\n        if (containScroll === \"keepSnaps\") return snapsBounded;\n        const { min, max } = scrollContainLimit;\n        return snapsBounded.slice(min, max);\n    }\n    const self = {\n        snapsContained,\n        scrollContainLimit\n    };\n    return self;\n}\nfunction ScrollLimit(contentSize, scrollSnaps, loop) {\n    const max = scrollSnaps[0];\n    const min = loop ? max - contentSize : arrayLast(scrollSnaps);\n    const limit = Limit(min, max);\n    const self = {\n        limit\n    };\n    return self;\n}\nfunction ScrollLooper(contentSize, limit, offsetLocation, vectors) {\n    const jointSafety = 0.1;\n    const min = limit.min + jointSafety;\n    const max = limit.max + jointSafety;\n    const { reachedMin, reachedMax } = Limit(min, max);\n    function shouldLoop(direction) {\n        if (direction === 1) return reachedMax(offsetLocation.get());\n        if (direction === -1) return reachedMin(offsetLocation.get());\n        return false;\n    }\n    function loop(direction) {\n        if (!shouldLoop(direction)) return;\n        const loopDistance = contentSize * (direction * -1);\n        vectors.forEach((v)=>v.add(loopDistance));\n    }\n    const self = {\n        loop\n    };\n    return self;\n}\nfunction ScrollProgress(limit) {\n    const { max, length } = limit;\n    function get(n) {\n        const currentLocation = n - max;\n        return length ? currentLocation / -length : 0;\n    }\n    const self = {\n        get\n    };\n    return self;\n}\nfunction ScrollSnaps(axis, alignment, containerRect, slideRects, slidesToScroll) {\n    const { startEdge, endEdge } = axis;\n    const { groupSlides } = slidesToScroll;\n    const alignments = measureSizes().map(alignment.measure);\n    const snaps = measureUnaligned();\n    const snapsAligned = measureAligned();\n    function measureSizes() {\n        return groupSlides(slideRects).map((rects)=>arrayLast(rects)[endEdge] - rects[0][startEdge]).map(mathAbs);\n    }\n    function measureUnaligned() {\n        return slideRects.map((rect)=>containerRect[startEdge] - rect[startEdge]).map((snap)=>-mathAbs(snap));\n    }\n    function measureAligned() {\n        return groupSlides(snaps).map((g)=>g[0]).map((snap, index)=>snap + alignments[index]);\n    }\n    const self = {\n        snaps,\n        snapsAligned\n    };\n    return self;\n}\nfunction SlideRegistry(containSnaps, containScroll, scrollSnaps, scrollContainLimit, slidesToScroll, slideIndexes) {\n    const { groupSlides } = slidesToScroll;\n    const { min, max } = scrollContainLimit;\n    const slideRegistry = createSlideRegistry();\n    function createSlideRegistry() {\n        const groupedSlideIndexes = groupSlides(slideIndexes);\n        const doNotContain = !containSnaps || containScroll === \"keepSnaps\";\n        if (scrollSnaps.length === 1) return [\n            slideIndexes\n        ];\n        if (doNotContain) return groupedSlideIndexes;\n        return groupedSlideIndexes.slice(min, max).map((group, index, groups)=>{\n            const isFirst = !index;\n            const isLast = arrayIsLastIndex(groups, index);\n            if (isFirst) {\n                const range = arrayLast(groups[0]) + 1;\n                return arrayFromNumber(range);\n            }\n            if (isLast) {\n                const range = arrayLastIndex(slideIndexes) - arrayLast(groups)[0] + 1;\n                return arrayFromNumber(range, arrayLast(groups)[0]);\n            }\n            return group;\n        });\n    }\n    const self = {\n        slideRegistry\n    };\n    return self;\n}\nfunction ScrollTarget(loop, scrollSnaps, contentSize, limit, targetVector) {\n    const { reachedAny, removeOffset, constrain } = limit;\n    function minDistance(distances) {\n        return distances.concat().sort((a, b)=>mathAbs(a) - mathAbs(b))[0];\n    }\n    function findTargetSnap(target) {\n        const distance = loop ? removeOffset(target) : constrain(target);\n        const ascDiffsToSnaps = scrollSnaps.map((scrollSnap)=>scrollSnap - distance).map((diffToSnap)=>shortcut(diffToSnap, 0)).map((diff, i)=>({\n                diff,\n                index: i\n            })).sort((d1, d2)=>mathAbs(d1.diff) - mathAbs(d2.diff));\n        const { index } = ascDiffsToSnaps[0];\n        return {\n            index,\n            distance\n        };\n    }\n    function shortcut(target, direction) {\n        const targets = [\n            target,\n            target + contentSize,\n            target - contentSize\n        ];\n        if (!loop) return targets[0];\n        if (!direction) return minDistance(targets);\n        const matchingTargets = targets.filter((t)=>mathSign(t) === direction);\n        if (matchingTargets.length) return minDistance(matchingTargets);\n        return arrayLast(targets) - contentSize;\n    }\n    function byIndex(index, direction) {\n        const diffToSnap = scrollSnaps[index] - targetVector.get();\n        const distance = shortcut(diffToSnap, direction);\n        return {\n            index,\n            distance\n        };\n    }\n    function byDistance(distance, snap) {\n        const target = targetVector.get() + distance;\n        const { index, distance: targetSnapDistance } = findTargetSnap(target);\n        const reachedBound = !loop && reachedAny(target);\n        if (!snap || reachedBound) return {\n            index,\n            distance\n        };\n        const diffToSnap = scrollSnaps[index] - targetSnapDistance;\n        const snapDistance = distance + shortcut(diffToSnap, 0);\n        return {\n            index,\n            distance: snapDistance\n        };\n    }\n    const self = {\n        byDistance,\n        byIndex,\n        shortcut\n    };\n    return self;\n}\nfunction ScrollTo(animation, indexCurrent, indexPrevious, scrollBody, scrollTarget, targetVector, eventHandler) {\n    function scrollTo(target) {\n        const distanceDiff = target.distance;\n        const indexDiff = target.index !== indexCurrent.get();\n        targetVector.add(distanceDiff);\n        if (distanceDiff) {\n            if (scrollBody.duration()) {\n                animation.start();\n            } else {\n                animation.update();\n                animation.render(1);\n                animation.update();\n            }\n        }\n        if (indexDiff) {\n            indexPrevious.set(indexCurrent.get());\n            indexCurrent.set(target.index);\n            eventHandler.emit(\"select\");\n        }\n    }\n    function distance(n, snap) {\n        const target = scrollTarget.byDistance(n, snap);\n        scrollTo(target);\n    }\n    function index(n, direction) {\n        const targetIndex = indexCurrent.clone().set(n);\n        const target = scrollTarget.byIndex(targetIndex.get(), direction);\n        scrollTo(target);\n    }\n    const self = {\n        distance,\n        index\n    };\n    return self;\n}\nfunction SlideFocus(root, slides, slideRegistry, scrollTo, scrollBody, eventStore) {\n    let lastTabPressTime = 0;\n    function init() {\n        eventStore.add(document, \"keydown\", registerTabPress, false);\n        slides.forEach(addSlideFocusEvent);\n    }\n    function registerTabPress(event) {\n        if (event.code === \"Tab\") lastTabPressTime = new Date().getTime();\n    }\n    function addSlideFocusEvent(slide) {\n        const focus = ()=>{\n            const nowTime = new Date().getTime();\n            const diffTime = nowTime - lastTabPressTime;\n            if (diffTime > 10) return;\n            root.scrollLeft = 0;\n            const index = slides.indexOf(slide);\n            const group = slideRegistry.findIndex((group)=>group.includes(index));\n            if (!isNumber(group)) return;\n            scrollBody.useDuration(0);\n            scrollTo.index(group, 0);\n        };\n        eventStore.add(slide, \"focus\", focus, {\n            passive: true,\n            capture: true\n        });\n    }\n    const self = {\n        init\n    };\n    return self;\n}\nfunction Vector1D(initialValue) {\n    let value = initialValue;\n    function get() {\n        return value;\n    }\n    function set(n) {\n        value = normalizeInput(n);\n    }\n    function add(n) {\n        value += normalizeInput(n);\n    }\n    function subtract(n) {\n        value -= normalizeInput(n);\n    }\n    function normalizeInput(n) {\n        return isNumber(n) ? n : n.get();\n    }\n    const self = {\n        get,\n        set,\n        add,\n        subtract\n    };\n    return self;\n}\nfunction Translate(axis, direction, container) {\n    const translate = axis.scroll === \"x\" ? x : y;\n    const containerStyle = container.style;\n    let disabled = false;\n    function x(n) {\n        return `translate3d(${n}px,0px,0px)`;\n    }\n    function y(n) {\n        return `translate3d(0px,${n}px,0px)`;\n    }\n    function to(target) {\n        if (disabled) return;\n        containerStyle.transform = translate(direction.apply(target));\n    }\n    function toggleActive(active) {\n        disabled = !active;\n    }\n    function clear() {\n        if (disabled) return;\n        containerStyle.transform = \"\";\n        if (!container.getAttribute(\"style\")) container.removeAttribute(\"style\");\n    }\n    const self = {\n        clear,\n        to,\n        toggleActive\n    };\n    return self;\n}\nfunction SlideLooper(axis, direction, viewSize, contentSize, slideSizes, slideSizesWithGaps, snaps, scrollSnaps, offsetLocation, slides) {\n    const roundingSafety = 0.5;\n    const ascItems = arrayKeys(slideSizesWithGaps);\n    const descItems = arrayKeys(slideSizesWithGaps).reverse();\n    const loopPoints = startPoints().concat(endPoints());\n    function removeSlideSizes(indexes, from) {\n        return indexes.reduce((a, i)=>{\n            return a - slideSizesWithGaps[i];\n        }, from);\n    }\n    function slidesInGap(indexes, gap) {\n        return indexes.reduce((a, i)=>{\n            const remainingGap = removeSlideSizes(a, gap);\n            return remainingGap > 0 ? a.concat([\n                i\n            ]) : a;\n        }, []);\n    }\n    function findSlideBounds(offset) {\n        return snaps.map((snap, index)=>({\n                start: snap - slideSizes[index] + roundingSafety + offset,\n                end: snap + viewSize - roundingSafety + offset\n            }));\n    }\n    function findLoopPoints(indexes, offset, isEndEdge) {\n        const slideBounds = findSlideBounds(offset);\n        return indexes.map((index)=>{\n            const initial = isEndEdge ? 0 : -contentSize;\n            const altered = isEndEdge ? contentSize : 0;\n            const boundEdge = isEndEdge ? \"end\" : \"start\";\n            const loopPoint = slideBounds[index][boundEdge];\n            return {\n                index,\n                loopPoint,\n                slideLocation: Vector1D(-1),\n                translate: Translate(axis, direction, slides[index]),\n                target: ()=>offsetLocation.get() > loopPoint ? initial : altered\n            };\n        });\n    }\n    function startPoints() {\n        const gap = scrollSnaps[0];\n        const indexes = slidesInGap(descItems, gap);\n        return findLoopPoints(indexes, contentSize, false);\n    }\n    function endPoints() {\n        const gap = viewSize - scrollSnaps[0] - 1;\n        const indexes = slidesInGap(ascItems, gap);\n        return findLoopPoints(indexes, -contentSize, true);\n    }\n    function canLoop() {\n        return loopPoints.every(({ index })=>{\n            const otherIndexes = ascItems.filter((i)=>i !== index);\n            return removeSlideSizes(otherIndexes, viewSize) <= 0.1;\n        });\n    }\n    function loop() {\n        loopPoints.forEach((loopPoint)=>{\n            const { target, translate, slideLocation } = loopPoint;\n            const shiftLocation = target();\n            if (shiftLocation === slideLocation.get()) return;\n            translate.to(shiftLocation);\n            slideLocation.set(shiftLocation);\n        });\n    }\n    function clear() {\n        loopPoints.forEach((loopPoint)=>loopPoint.translate.clear());\n    }\n    const self = {\n        canLoop,\n        clear,\n        loop,\n        loopPoints\n    };\n    return self;\n}\nfunction SlidesHandler(container, eventHandler, watchSlides) {\n    let mutationObserver;\n    let destroyed = false;\n    function init(emblaApi) {\n        if (!watchSlides) return;\n        function defaultCallback(mutations) {\n            for (const mutation of mutations){\n                if (mutation.type === \"childList\") {\n                    emblaApi.reInit();\n                    eventHandler.emit(\"slidesChanged\");\n                    break;\n                }\n            }\n        }\n        mutationObserver = new MutationObserver((mutations)=>{\n            if (destroyed) return;\n            if (isBoolean(watchSlides) || watchSlides(emblaApi, mutations)) {\n                defaultCallback(mutations);\n            }\n        });\n        mutationObserver.observe(container, {\n            childList: true\n        });\n    }\n    function destroy() {\n        if (mutationObserver) mutationObserver.disconnect();\n        destroyed = true;\n    }\n    const self = {\n        init,\n        destroy\n    };\n    return self;\n}\nfunction SlidesInView(container, slides, eventHandler, threshold) {\n    const intersectionEntryMap = {};\n    let inViewCache = null;\n    let notInViewCache = null;\n    let intersectionObserver;\n    let destroyed = false;\n    function init() {\n        intersectionObserver = new IntersectionObserver((entries)=>{\n            if (destroyed) return;\n            entries.forEach((entry)=>{\n                const index = slides.indexOf(entry.target);\n                intersectionEntryMap[index] = entry;\n            });\n            inViewCache = null;\n            notInViewCache = null;\n            eventHandler.emit(\"slidesInView\");\n        }, {\n            root: container.parentElement,\n            threshold\n        });\n        slides.forEach((slide)=>intersectionObserver.observe(slide));\n    }\n    function destroy() {\n        if (intersectionObserver) intersectionObserver.disconnect();\n        destroyed = true;\n    }\n    function createInViewList(inView) {\n        return objectKeys(intersectionEntryMap).reduce((list, slideIndex)=>{\n            const index = parseInt(slideIndex);\n            const { isIntersecting } = intersectionEntryMap[index];\n            const inViewMatch = inView && isIntersecting;\n            const notInViewMatch = !inView && !isIntersecting;\n            if (inViewMatch || notInViewMatch) list.push(index);\n            return list;\n        }, []);\n    }\n    function get(inView = true) {\n        if (inView && inViewCache) return inViewCache;\n        if (!inView && notInViewCache) return notInViewCache;\n        const slideIndexes = createInViewList(inView);\n        if (inView) inViewCache = slideIndexes;\n        if (!inView) notInViewCache = slideIndexes;\n        return slideIndexes;\n    }\n    const self = {\n        init,\n        destroy,\n        get\n    };\n    return self;\n}\nfunction SlideSizes(axis, containerRect, slideRects, slides, readEdgeGap, ownerWindow) {\n    const { measureSize, startEdge, endEdge } = axis;\n    const withEdgeGap = slideRects[0] && readEdgeGap;\n    const startGap = measureStartGap();\n    const endGap = measureEndGap();\n    const slideSizes = slideRects.map(measureSize);\n    const slideSizesWithGaps = measureWithGaps();\n    function measureStartGap() {\n        if (!withEdgeGap) return 0;\n        const slideRect = slideRects[0];\n        return mathAbs(containerRect[startEdge] - slideRect[startEdge]);\n    }\n    function measureEndGap() {\n        if (!withEdgeGap) return 0;\n        const style = ownerWindow.getComputedStyle(arrayLast(slides));\n        return parseFloat(style.getPropertyValue(`margin-${endEdge}`));\n    }\n    function measureWithGaps() {\n        return slideRects.map((rect, index, rects)=>{\n            const isFirst = !index;\n            const isLast = arrayIsLastIndex(rects, index);\n            if (isFirst) return slideSizes[index] + startGap;\n            if (isLast) return slideSizes[index] + endGap;\n            return rects[index + 1][startEdge] - rect[startEdge];\n        }).map(mathAbs);\n    }\n    const self = {\n        slideSizes,\n        slideSizesWithGaps,\n        startGap,\n        endGap\n    };\n    return self;\n}\nfunction SlidesToScroll(axis, direction, viewSize, slidesToScroll, loop, containerRect, slideRects, startGap, endGap, pixelTolerance) {\n    const { startEdge, endEdge } = axis;\n    const groupByNumber = isNumber(slidesToScroll);\n    function byNumber(array, groupSize) {\n        return arrayKeys(array).filter((i)=>i % groupSize === 0).map((i)=>array.slice(i, i + groupSize));\n    }\n    function bySize(array) {\n        if (!array.length) return [];\n        return arrayKeys(array).reduce((groups, rectB)=>{\n            const rectA = arrayLast(groups) || 0;\n            const isFirst = rectA === 0;\n            const isLast = rectB === arrayLastIndex(array);\n            const edgeA = containerRect[startEdge] - slideRects[rectA][startEdge];\n            const edgeB = containerRect[startEdge] - slideRects[rectB][endEdge];\n            const gapA = !loop && isFirst ? direction.apply(startGap) : 0;\n            const gapB = !loop && isLast ? direction.apply(endGap) : 0;\n            const chunkSize = mathAbs(edgeB - gapB - (edgeA + gapA));\n            if (chunkSize > viewSize + pixelTolerance) groups.push(rectB);\n            if (isLast) groups.push(array.length);\n            return groups;\n        }, []).map((currentSize, index, groups)=>{\n            const previousSize = Math.max(groups[index - 1] || 0);\n            return array.slice(previousSize, currentSize);\n        });\n    }\n    function groupSlides(array) {\n        return groupByNumber ? byNumber(array, slidesToScroll) : bySize(array);\n    }\n    const self = {\n        groupSlides\n    };\n    return self;\n}\nfunction Engine(root, container, slides, ownerDocument, ownerWindow, options, eventHandler) {\n    // Options\n    const { align, axis: scrollAxis, direction: contentDirection, startIndex, loop, duration, dragFree, dragThreshold, inViewThreshold, slidesToScroll: groupSlides, skipSnaps, containScroll, watchResize, watchSlides, watchDrag } = options;\n    // Measurements\n    const pixelTolerance = 2;\n    const nodeRects = NodeRects();\n    const containerRect = nodeRects.measure(container);\n    const slideRects = slides.map(nodeRects.measure);\n    const direction = Direction(contentDirection);\n    const axis = Axis(scrollAxis, contentDirection);\n    const viewSize = axis.measureSize(containerRect);\n    const percentOfView = PercentOfView(viewSize);\n    const alignment = Alignment(align, viewSize);\n    const containSnaps = !loop && !!containScroll;\n    const readEdgeGap = loop || !!containScroll;\n    const { slideSizes, slideSizesWithGaps, startGap, endGap } = SlideSizes(axis, containerRect, slideRects, slides, readEdgeGap, ownerWindow);\n    const slidesToScroll = SlidesToScroll(axis, direction, viewSize, groupSlides, loop, containerRect, slideRects, startGap, endGap, pixelTolerance);\n    const { snaps, snapsAligned } = ScrollSnaps(axis, alignment, containerRect, slideRects, slidesToScroll);\n    const contentSize = -arrayLast(snaps) + arrayLast(slideSizesWithGaps);\n    const { snapsContained, scrollContainLimit } = ScrollContain(viewSize, contentSize, snapsAligned, containScroll, pixelTolerance);\n    const scrollSnaps = containSnaps ? snapsContained : snapsAligned;\n    const { limit } = ScrollLimit(contentSize, scrollSnaps, loop);\n    // Indexes\n    const index = Counter(arrayLastIndex(scrollSnaps), startIndex, loop);\n    const indexPrevious = index.clone();\n    const slideIndexes = arrayKeys(slides);\n    // Animation\n    const update = ({ dragHandler, scrollBody, scrollBounds, options: { loop } })=>{\n        if (!loop) scrollBounds.constrain(dragHandler.pointerDown());\n        scrollBody.seek();\n    };\n    const render = ({ scrollBody, translate, location, offsetLocation, scrollLooper, slideLooper, dragHandler, animation, eventHandler, options: { loop } }, lagOffset)=>{\n        const velocity = scrollBody.velocity();\n        const hasSettled = scrollBody.settled();\n        if (hasSettled && !dragHandler.pointerDown()) {\n            animation.stop();\n            eventHandler.emit(\"settle\");\n        }\n        if (!hasSettled) eventHandler.emit(\"scroll\");\n        offsetLocation.set(location.get() - velocity + velocity * lagOffset);\n        if (loop) {\n            scrollLooper.loop(scrollBody.direction());\n            slideLooper.loop();\n        }\n        translate.to(offsetLocation.get());\n    };\n    const animation = Animations(ownerDocument, ownerWindow, ()=>update(engine), (lagOffset)=>render(engine, lagOffset));\n    // Shared\n    const friction = 0.68;\n    const startLocation = scrollSnaps[index.get()];\n    const location = Vector1D(startLocation);\n    const offsetLocation = Vector1D(startLocation);\n    const target = Vector1D(startLocation);\n    const scrollBody = ScrollBody(location, offsetLocation, target, duration, friction);\n    const scrollTarget = ScrollTarget(loop, scrollSnaps, contentSize, limit, target);\n    const scrollTo = ScrollTo(animation, index, indexPrevious, scrollBody, scrollTarget, target, eventHandler);\n    const scrollProgress = ScrollProgress(limit);\n    const eventStore = EventStore();\n    const slidesInView = SlidesInView(container, slides, eventHandler, inViewThreshold);\n    const { slideRegistry } = SlideRegistry(containSnaps, containScroll, scrollSnaps, scrollContainLimit, slidesToScroll, slideIndexes);\n    const slideFocus = SlideFocus(root, slides, slideRegistry, scrollTo, scrollBody, eventStore);\n    // Engine\n    const engine = {\n        ownerDocument,\n        ownerWindow,\n        eventHandler,\n        containerRect,\n        slideRects,\n        animation,\n        axis,\n        direction,\n        dragHandler: DragHandler(axis, direction, root, ownerDocument, ownerWindow, target, DragTracker(axis, ownerWindow), location, animation, scrollTo, scrollBody, scrollTarget, index, eventHandler, percentOfView, dragFree, dragThreshold, skipSnaps, friction, watchDrag),\n        eventStore,\n        percentOfView,\n        index,\n        indexPrevious,\n        limit,\n        location,\n        offsetLocation,\n        options,\n        resizeHandler: ResizeHandler(container, eventHandler, ownerWindow, slides, axis, watchResize, nodeRects),\n        scrollBody,\n        scrollBounds: ScrollBounds(limit, location, target, scrollBody, percentOfView),\n        scrollLooper: ScrollLooper(contentSize, limit, offsetLocation, [\n            location,\n            offsetLocation,\n            target\n        ]),\n        scrollProgress,\n        scrollSnapList: scrollSnaps.map(scrollProgress.get),\n        scrollSnaps,\n        scrollTarget,\n        scrollTo,\n        slideLooper: SlideLooper(axis, direction, viewSize, contentSize, slideSizes, slideSizesWithGaps, snaps, scrollSnaps, offsetLocation, slides),\n        slideFocus,\n        slidesHandler: SlidesHandler(container, eventHandler, watchSlides),\n        slidesInView,\n        slideIndexes,\n        slideRegistry,\n        slidesToScroll,\n        target,\n        translate: Translate(axis, direction, container)\n    };\n    return engine;\n}\nfunction EventHandler() {\n    const listeners = {};\n    let api;\n    function init(emblaApi) {\n        api = emblaApi;\n    }\n    function getListeners(evt) {\n        return listeners[evt] || [];\n    }\n    function emit(evt) {\n        getListeners(evt).forEach((e)=>e(api, evt));\n        return self;\n    }\n    function on(evt, cb) {\n        listeners[evt] = getListeners(evt).concat([\n            cb\n        ]);\n        return self;\n    }\n    function off(evt, cb) {\n        listeners[evt] = getListeners(evt).filter((e)=>e !== cb);\n        return self;\n    }\n    const self = {\n        init,\n        emit,\n        off,\n        on\n    };\n    return self;\n}\nconst defaultOptions = {\n    align: \"center\",\n    axis: \"x\",\n    container: null,\n    slides: null,\n    containScroll: \"trimSnaps\",\n    direction: \"ltr\",\n    slidesToScroll: 1,\n    inViewThreshold: 0,\n    breakpoints: {},\n    dragFree: false,\n    dragThreshold: 10,\n    loop: false,\n    skipSnaps: false,\n    duration: 25,\n    startIndex: 0,\n    active: true,\n    watchDrag: true,\n    watchResize: true,\n    watchSlides: true\n};\nfunction OptionsHandler(ownerWindow) {\n    function mergeOptions(optionsA, optionsB) {\n        return objectsMergeDeep(optionsA, optionsB || {});\n    }\n    function optionsAtMedia(options) {\n        const optionsAtMedia = options.breakpoints || {};\n        const matchedMediaOptions = objectKeys(optionsAtMedia).filter((media)=>ownerWindow.matchMedia(media).matches).map((media)=>optionsAtMedia[media]).reduce((a, mediaOption)=>mergeOptions(a, mediaOption), {});\n        return mergeOptions(options, matchedMediaOptions);\n    }\n    function optionsMediaQueries(optionsList) {\n        return optionsList.map((options)=>objectKeys(options.breakpoints || {})).reduce((acc, mediaQueries)=>acc.concat(mediaQueries), []).map(ownerWindow.matchMedia);\n    }\n    const self = {\n        mergeOptions,\n        optionsAtMedia,\n        optionsMediaQueries\n    };\n    return self;\n}\nfunction PluginsHandler(optionsHandler) {\n    let activePlugins = [];\n    function init(emblaApi, plugins) {\n        activePlugins = plugins.filter(({ options })=>optionsHandler.optionsAtMedia(options).active !== false);\n        activePlugins.forEach((plugin)=>plugin.init(emblaApi, optionsHandler));\n        return plugins.reduce((map, plugin)=>Object.assign(map, {\n                [plugin.name]: plugin\n            }), {});\n    }\n    function destroy() {\n        activePlugins = activePlugins.filter((plugin)=>plugin.destroy());\n    }\n    const self = {\n        init,\n        destroy\n    };\n    return self;\n}\nfunction EmblaCarousel(root, userOptions, userPlugins) {\n    const ownerDocument = root.ownerDocument;\n    const ownerWindow = ownerDocument.defaultView;\n    const optionsHandler = OptionsHandler(ownerWindow);\n    const pluginsHandler = PluginsHandler(optionsHandler);\n    const mediaHandlers = EventStore();\n    const eventHandler = EventHandler();\n    const { mergeOptions, optionsAtMedia, optionsMediaQueries } = optionsHandler;\n    const { on, off, emit } = eventHandler;\n    const reInit = reActivate;\n    let destroyed = false;\n    let engine;\n    let optionsBase = mergeOptions(defaultOptions, EmblaCarousel.globalOptions);\n    let options = mergeOptions(optionsBase);\n    let pluginList = [];\n    let pluginApis;\n    let container;\n    let slides;\n    function storeElements() {\n        const { container: userContainer, slides: userSlides } = options;\n        const customContainer = isString(userContainer) ? root.querySelector(userContainer) : userContainer;\n        container = customContainer || root.children[0];\n        const customSlides = isString(userSlides) ? container.querySelectorAll(userSlides) : userSlides;\n        slides = [].slice.call(customSlides || container.children);\n    }\n    function createEngine(options) {\n        const engine = Engine(root, container, slides, ownerDocument, ownerWindow, options, eventHandler);\n        if (options.loop && !engine.slideLooper.canLoop()) {\n            const optionsWithoutLoop = Object.assign({}, options, {\n                loop: false\n            });\n            return createEngine(optionsWithoutLoop);\n        }\n        return engine;\n    }\n    function activate(withOptions, withPlugins) {\n        if (destroyed) return;\n        optionsBase = mergeOptions(optionsBase, withOptions);\n        options = optionsAtMedia(optionsBase);\n        pluginList = withPlugins || pluginList;\n        storeElements();\n        engine = createEngine(options);\n        optionsMediaQueries([\n            optionsBase,\n            ...pluginList.map(({ options })=>options)\n        ]).forEach((query)=>mediaHandlers.add(query, \"change\", reActivate));\n        if (!options.active) return;\n        engine.translate.to(engine.location.get());\n        engine.animation.init();\n        engine.slidesInView.init();\n        engine.slideFocus.init();\n        engine.eventHandler.init(self);\n        engine.resizeHandler.init(self);\n        engine.slidesHandler.init(self);\n        if (engine.options.loop) engine.slideLooper.loop();\n        if (container.offsetParent && slides.length) engine.dragHandler.init(self);\n        pluginApis = pluginsHandler.init(self, pluginList);\n    }\n    function reActivate(withOptions, withPlugins) {\n        const startIndex = selectedScrollSnap();\n        deActivate();\n        activate(mergeOptions({\n            startIndex\n        }, withOptions), withPlugins);\n        eventHandler.emit(\"reInit\");\n    }\n    function deActivate() {\n        engine.dragHandler.destroy();\n        engine.eventStore.clear();\n        engine.translate.clear();\n        engine.slideLooper.clear();\n        engine.resizeHandler.destroy();\n        engine.slidesHandler.destroy();\n        engine.slidesInView.destroy();\n        engine.animation.destroy();\n        pluginsHandler.destroy();\n        mediaHandlers.clear();\n    }\n    function destroy() {\n        if (destroyed) return;\n        destroyed = true;\n        mediaHandlers.clear();\n        deActivate();\n        eventHandler.emit(\"destroy\");\n    }\n    function scrollTo(index, jump, direction) {\n        if (!options.active || destroyed) return;\n        engine.scrollBody.useBaseFriction().useDuration(jump === true ? 0 : options.duration);\n        engine.scrollTo.index(index, direction || 0);\n    }\n    function scrollNext(jump) {\n        const next = engine.index.add(1).get();\n        scrollTo(next, jump, -1);\n    }\n    function scrollPrev(jump) {\n        const prev = engine.index.add(-1).get();\n        scrollTo(prev, jump, 1);\n    }\n    function canScrollNext() {\n        const next = engine.index.add(1).get();\n        return next !== selectedScrollSnap();\n    }\n    function canScrollPrev() {\n        const prev = engine.index.add(-1).get();\n        return prev !== selectedScrollSnap();\n    }\n    function scrollSnapList() {\n        return engine.scrollSnapList;\n    }\n    function scrollProgress() {\n        return engine.scrollProgress.get(engine.location.get());\n    }\n    function selectedScrollSnap() {\n        return engine.index.get();\n    }\n    function previousScrollSnap() {\n        return engine.indexPrevious.get();\n    }\n    function slidesInView() {\n        return engine.slidesInView.get();\n    }\n    function slidesNotInView() {\n        return engine.slidesInView.get(false);\n    }\n    function plugins() {\n        return pluginApis;\n    }\n    function internalEngine() {\n        return engine;\n    }\n    function rootNode() {\n        return root;\n    }\n    function containerNode() {\n        return container;\n    }\n    function slideNodes() {\n        return slides;\n    }\n    const self = {\n        canScrollNext,\n        canScrollPrev,\n        containerNode,\n        internalEngine,\n        destroy,\n        off,\n        on,\n        emit,\n        plugins,\n        previousScrollSnap,\n        reInit,\n        rootNode,\n        scrollNext,\n        scrollPrev,\n        scrollProgress,\n        scrollSnapList,\n        scrollTo,\n        selectedScrollSnap,\n        slideNodes,\n        slidesInView,\n        slidesNotInView\n    };\n    activate(userOptions, userPlugins);\n    setTimeout(()=>eventHandler.emit(\"init\"), 0);\n    return self;\n}\nEmblaCarousel.globalOptions = undefined;\n //# sourceMappingURL=embla-carousel.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZW1ibGEtY2Fyb3VzZWwvZXNtL2VtYmxhLWNhcm91c2VsLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsU0FBU0MsT0FBTztJQUN2QixPQUFPLE9BQU9BLFlBQVk7QUFDNUI7QUFDQSxTQUFTQyxTQUFTRCxPQUFPO0lBQ3ZCLE9BQU8sT0FBT0EsWUFBWTtBQUM1QjtBQUNBLFNBQVNFLFVBQVVGLE9BQU87SUFDeEIsT0FBTyxPQUFPQSxZQUFZO0FBQzVCO0FBQ0EsU0FBU0csU0FBU0gsT0FBTztJQUN2QixPQUFPSSxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDUCxhQUFhO0FBQ3JEO0FBQ0EsU0FBU1EsUUFBUUMsQ0FBQztJQUNoQixPQUFPQyxLQUFLQyxHQUFHLENBQUNGO0FBQ2xCO0FBQ0EsU0FBU0csU0FBU0gsQ0FBQztJQUNqQixPQUFPQyxLQUFLRyxJQUFJLENBQUNKO0FBQ25CO0FBQ0EsU0FBU0ssU0FBU0MsTUFBTSxFQUFFQyxNQUFNO0lBQzlCLE9BQU9SLFFBQVFPLFNBQVNDO0FBQzFCO0FBQ0EsU0FBU0MsVUFBVUYsTUFBTSxFQUFFQyxNQUFNO0lBQy9CLElBQUlELFdBQVcsS0FBS0MsV0FBVyxHQUFHLE9BQU87SUFDekMsSUFBSVIsUUFBUU8sV0FBV1AsUUFBUVEsU0FBUyxPQUFPO0lBQy9DLE1BQU1FLE9BQU9KLFNBQVNOLFFBQVFPLFNBQVNQLFFBQVFRO0lBQy9DLE9BQU9SLFFBQVFVLE9BQU9IO0FBQ3hCO0FBQ0EsU0FBU0ksVUFBVUMsS0FBSztJQUN0QixPQUFPQyxXQUFXRCxPQUFPRSxHQUFHLENBQUNDO0FBQy9CO0FBQ0EsU0FBU0MsVUFBVUosS0FBSztJQUN0QixPQUFPQSxLQUFLLENBQUNLLGVBQWVMLE9BQU87QUFDckM7QUFDQSxTQUFTSyxlQUFlTCxLQUFLO0lBQzNCLE9BQU9WLEtBQUtnQixHQUFHLENBQUMsR0FBR04sTUFBTU8sTUFBTSxHQUFHO0FBQ3BDO0FB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dVk7UUFDUCxPQUFPYztJQUNUO0lBQ0EsU0FBUzBCO1FBQ1AsT0FBTzFFO0lBQ1Q7SUFDQSxTQUFTL1Y7UUFDUCxPQUFPOE87SUFDVDtJQUNBLFNBQVM0TDtRQUNQLE9BQU9yVTtJQUNUO0lBQ0EsU0FBU3NVO1FBQ1AsT0FBT3JVO0lBQ1Q7SUFDQSxNQUFNNUssT0FBTztRQUNYMmU7UUFDQUM7UUFDQUk7UUFDQUQ7UUFDQWpkO1FBQ0FxWjtRQUNBRjtRQUNBN1M7UUFDQW1VO1FBQ0FzQztRQUNBaFQ7UUFDQXZIO1FBQ0FrYTtRQUNBQztRQUNBbEU7UUFDQUk7UUFDQWhXO1FBQ0EwWjtRQUNBWTtRQUNBekU7UUFDQXNFO0lBQ0Y7SUFDQWQsU0FBU3BCLGFBQWFDO0lBQ3RCcUMsV0FBVyxJQUFNcGEsYUFBYXNELElBQUksQ0FBQyxTQUFTO0lBQzVDLE9BQU9wSTtBQUNUO0FBQ0EyYyxjQUFjUSxhQUFhLEdBQUd4VztBQUVNLENBQ3BDLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9lbWJsYS1jYXJvdXNlbC9lc20vZW1ibGEtY2Fyb3VzZWwuZXNtLmpzPzJkODAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNOdW1iZXIoc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09ICdudW1iZXInO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcoc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gaXNCb29sZWFuKHN1YmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSAnYm9vbGVhbic7XG59XG5mdW5jdGlvbiBpc09iamVjdChzdWJqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ViamVjdCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuZnVuY3Rpb24gbWF0aEFicyhuKSB7XG4gIHJldHVybiBNYXRoLmFicyhuKTtcbn1cbmZ1bmN0aW9uIG1hdGhTaWduKG4pIHtcbiAgcmV0dXJuIE1hdGguc2lnbihuKTtcbn1cbmZ1bmN0aW9uIGRlbHRhQWJzKHZhbHVlQiwgdmFsdWVBKSB7XG4gIHJldHVybiBtYXRoQWJzKHZhbHVlQiAtIHZhbHVlQSk7XG59XG5mdW5jdGlvbiBmYWN0b3JBYnModmFsdWVCLCB2YWx1ZUEpIHtcbiAgaWYgKHZhbHVlQiA9PT0gMCB8fCB2YWx1ZUEgPT09IDApIHJldHVybiAwO1xuICBpZiAobWF0aEFicyh2YWx1ZUIpIDw9IG1hdGhBYnModmFsdWVBKSkgcmV0dXJuIDA7XG4gIGNvbnN0IGRpZmYgPSBkZWx0YUFicyhtYXRoQWJzKHZhbHVlQiksIG1hdGhBYnModmFsdWVBKSk7XG4gIHJldHVybiBtYXRoQWJzKGRpZmYgLyB2YWx1ZUIpO1xufVxuZnVuY3Rpb24gYXJyYXlLZXlzKGFycmF5KSB7XG4gIHJldHVybiBvYmplY3RLZXlzKGFycmF5KS5tYXAoTnVtYmVyKTtcbn1cbmZ1bmN0aW9uIGFycmF5TGFzdChhcnJheSkge1xuICByZXR1cm4gYXJyYXlbYXJyYXlMYXN0SW5kZXgoYXJyYXkpXTtcbn1cbmZ1bmN0aW9uIGFycmF5TGFzdEluZGV4KGFycmF5KSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAxKTtcbn1cbmZ1bmN0aW9uIGFycmF5SXNMYXN0SW5kZXgoYXJyYXksIGluZGV4KSB7XG4gIHJldHVybiBpbmRleCA9PT0gYXJyYXlMYXN0SW5kZXgoYXJyYXkpO1xufVxuZnVuY3Rpb24gYXJyYXlGcm9tTnVtYmVyKG4sIHN0YXJ0QXQgPSAwKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKEFycmF5KG4pLCAoXywgaSkgPT4gc3RhcnRBdCArIGkpO1xufVxuZnVuY3Rpb24gb2JqZWN0S2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCk7XG59XG5mdW5jdGlvbiBvYmplY3RzTWVyZ2VEZWVwKG9iamVjdEEsIG9iamVjdEIpIHtcbiAgcmV0dXJuIFtvYmplY3RBLCBvYmplY3RCXS5yZWR1Y2UoKG1lcmdlZE9iamVjdHMsIGN1cnJlbnRPYmplY3QpID0+IHtcbiAgICBvYmplY3RLZXlzKGN1cnJlbnRPYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlQSA9IG1lcmdlZE9iamVjdHNba2V5XTtcbiAgICAgIGNvbnN0IHZhbHVlQiA9IGN1cnJlbnRPYmplY3Rba2V5XTtcbiAgICAgIGNvbnN0IGFyZU9iamVjdHMgPSBpc09iamVjdCh2YWx1ZUEpICYmIGlzT2JqZWN0KHZhbHVlQik7XG4gICAgICBtZXJnZWRPYmplY3RzW2tleV0gPSBhcmVPYmplY3RzID8gb2JqZWN0c01lcmdlRGVlcCh2YWx1ZUEsIHZhbHVlQikgOiB2YWx1ZUI7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lcmdlZE9iamVjdHM7XG4gIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIGlzTW91c2VFdmVudChldnQsIG93bmVyV2luZG93KSB7XG4gIHJldHVybiB0eXBlb2Ygb3duZXJXaW5kb3cuTW91c2VFdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZXZ0IGluc3RhbmNlb2Ygb3duZXJXaW5kb3cuTW91c2VFdmVudDtcbn1cblxuZnVuY3Rpb24gQWxpZ25tZW50KGFsaWduLCB2aWV3U2l6ZSkge1xuICBjb25zdCBwcmVkZWZpbmVkID0ge1xuICAgIHN0YXJ0LFxuICAgIGNlbnRlcixcbiAgICBlbmRcbiAgfTtcbiAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgZnVuY3Rpb24gY2VudGVyKG4pIHtcbiAgICByZXR1cm4gZW5kKG4pIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBlbmQobikge1xuICAgIHJldHVybiB2aWV3U2l6ZSAtIG47XG4gIH1cbiAgZnVuY3Rpb24gbWVhc3VyZShuLCBpbmRleCkge1xuICAgIGlmIChpc1N0cmluZyhhbGlnbikpIHJldHVybiBwcmVkZWZpbmVkW2FsaWduXShuKTtcbiAgICByZXR1cm4gYWxpZ24odmlld1NpemUsIG4sIGluZGV4KTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIG1lYXN1cmVcbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIEV2ZW50U3RvcmUoKSB7XG4gIGxldCBsaXN0ZW5lcnMgPSBbXTtcbiAgZnVuY3Rpb24gYWRkKG5vZGUsIHR5cGUsIGhhbmRsZXIsIG9wdGlvbnMgPSB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KSB7XG4gICAgbGV0IHJlbW92ZUxpc3RlbmVyO1xuICAgIGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gbm9kZSkge1xuICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIgPSAoKSA9PiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxlZ2FjeU1lZGlhUXVlcnlMaXN0ID0gbm9kZTtcbiAgICAgIGxlZ2FjeU1lZGlhUXVlcnlMaXN0LmFkZExpc3RlbmVyKGhhbmRsZXIpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIgPSAoKSA9PiBsZWdhY3lNZWRpYVF1ZXJ5TGlzdC5yZW1vdmVMaXN0ZW5lcihoYW5kbGVyKTtcbiAgICB9XG4gICAgbGlzdGVuZXJzLnB1c2gocmVtb3ZlTGlzdGVuZXIpO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIocmVtb3ZlID0+IHJlbW92ZSgpKTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIGFkZCxcbiAgICBjbGVhclxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9ucyhvd25lckRvY3VtZW50LCBvd25lcldpbmRvdywgdXBkYXRlLCByZW5kZXIpIHtcbiAgY29uc3QgZG9jdW1lbnRWaXNpYmxlSGFuZGxlciA9IEV2ZW50U3RvcmUoKTtcbiAgY29uc3QgdGltZVN0ZXAgPSAxMDAwIC8gNjA7XG4gIGxldCBsYXN0VGltZVN0YW1wID0gbnVsbDtcbiAgbGV0IGxhZyA9IDA7XG4gIGxldCBhbmltYXRpb25GcmFtZSA9IDA7XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgZG9jdW1lbnRWaXNpYmxlSGFuZGxlci5hZGQob3duZXJEb2N1bWVudCwgJ3Zpc2liaWxpdHljaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBpZiAob3duZXJEb2N1bWVudC5oaWRkZW4pIHJlc2V0KCk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBzdG9wKCk7XG4gICAgZG9jdW1lbnRWaXNpYmxlSGFuZGxlci5jbGVhcigpO1xuICB9XG4gIGZ1bmN0aW9uIGFuaW1hdGUodGltZVN0YW1wKSB7XG4gICAgaWYgKCFsYXN0VGltZVN0YW1wKSBsYXN0VGltZVN0YW1wID0gdGltZVN0YW1wO1xuICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lU3RhbXAgLSBsYXN0VGltZVN0YW1wO1xuICAgIGxhc3RUaW1lU3RhbXAgPSB0aW1lU3RhbXA7XG4gICAgbGFnICs9IGVsYXBzZWQ7XG4gICAgd2hpbGUgKGxhZyA+PSB0aW1lU3RlcCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgICBsYWcgLT0gdGltZVN0ZXA7XG4gICAgfVxuICAgIGNvbnN0IGxhZ09mZnNldCA9IG1hdGhBYnMobGFnIC8gdGltZVN0ZXApO1xuICAgIHJlbmRlcihsYWdPZmZzZXQpO1xuICAgIGlmIChhbmltYXRpb25GcmFtZSkgb3duZXJXaW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGlmIChhbmltYXRpb25GcmFtZSkgcmV0dXJuO1xuICAgIGFuaW1hdGlvbkZyYW1lID0gb3duZXJXaW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9XG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgb3duZXJXaW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgIGxhc3RUaW1lU3RhbXAgPSBudWxsO1xuICAgIGxhZyA9IDA7XG4gICAgYW5pbWF0aW9uRnJhbWUgPSAwO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGxhc3RUaW1lU3RhbXAgPSBudWxsO1xuICAgIGxhZyA9IDA7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBpbml0LFxuICAgIGRlc3Ryb3ksXG4gICAgc3RhcnQsXG4gICAgc3RvcCxcbiAgICB1cGRhdGUsXG4gICAgcmVuZGVyXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBBeGlzKGF4aXMsIGRpcmVjdGlvbikge1xuICBjb25zdCBzY3JvbGwgPSBheGlzID09PSAneScgPyAneScgOiAneCc7XG4gIGNvbnN0IGNyb3NzID0gYXhpcyA9PT0gJ3knID8gJ3gnIDogJ3knO1xuICBjb25zdCBzdGFydEVkZ2UgPSBnZXRTdGFydEVkZ2UoKTtcbiAgY29uc3QgZW5kRWRnZSA9IGdldEVuZEVkZ2UoKTtcbiAgZnVuY3Rpb24gbWVhc3VyZVNpemUobm9kZVJlY3QpIHtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBub2RlUmVjdDtcbiAgICByZXR1cm4gc2Nyb2xsID09PSAneCcgPyB3aWR0aCA6IGhlaWdodDtcbiAgfVxuICBmdW5jdGlvbiBnZXRTdGFydEVkZ2UoKSB7XG4gICAgaWYgKHNjcm9sbCA9PT0gJ3knKSByZXR1cm4gJ3RvcCc7XG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICB9XG4gIGZ1bmN0aW9uIGdldEVuZEVkZ2UoKSB7XG4gICAgaWYgKHNjcm9sbCA9PT0gJ3knKSByZXR1cm4gJ2JvdHRvbSc7XG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgc2Nyb2xsLFxuICAgIGNyb3NzLFxuICAgIHN0YXJ0RWRnZSxcbiAgICBlbmRFZGdlLFxuICAgIG1lYXN1cmVTaXplXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBMaW1pdChtaW4gPSAwLCBtYXggPSAwKSB7XG4gIGNvbnN0IGxlbmd0aCA9IG1hdGhBYnMobWluIC0gbWF4KTtcbiAgZnVuY3Rpb24gcmVhY2hlZE1pbihuKSB7XG4gICAgcmV0dXJuIG4gPCBtaW47XG4gIH1cbiAgZnVuY3Rpb24gcmVhY2hlZE1heChuKSB7XG4gICAgcmV0dXJuIG4gPiBtYXg7XG4gIH1cbiAgZnVuY3Rpb24gcmVhY2hlZEFueShuKSB7XG4gICAgcmV0dXJuIHJlYWNoZWRNaW4obikgfHwgcmVhY2hlZE1heChuKTtcbiAgfVxuICBmdW5jdGlvbiBjb25zdHJhaW4obikge1xuICAgIGlmICghcmVhY2hlZEFueShuKSkgcmV0dXJuIG47XG4gICAgcmV0dXJuIHJlYWNoZWRNaW4obikgPyBtaW4gOiBtYXg7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlT2Zmc2V0KG4pIHtcbiAgICBpZiAoIWxlbmd0aCkgcmV0dXJuIG47XG4gICAgcmV0dXJuIG4gLSBsZW5ndGggKiBNYXRoLmNlaWwoKG4gLSBtYXgpIC8gbGVuZ3RoKTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIGxlbmd0aCxcbiAgICBtYXgsXG4gICAgbWluLFxuICAgIGNvbnN0cmFpbixcbiAgICByZWFjaGVkQW55LFxuICAgIHJlYWNoZWRNYXgsXG4gICAgcmVhY2hlZE1pbixcbiAgICByZW1vdmVPZmZzZXRcbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIENvdW50ZXIobWF4LCBzdGFydCwgbG9vcCkge1xuICBjb25zdCB7XG4gICAgY29uc3RyYWluXG4gIH0gPSBMaW1pdCgwLCBtYXgpO1xuICBjb25zdCBsb29wRW5kID0gbWF4ICsgMTtcbiAgbGV0IGNvdW50ZXIgPSB3aXRoaW5MaW1pdChzdGFydCk7XG4gIGZ1bmN0aW9uIHdpdGhpbkxpbWl0KG4pIHtcbiAgICByZXR1cm4gIWxvb3AgPyBjb25zdHJhaW4obikgOiBtYXRoQWJzKChsb29wRW5kICsgbikgJSBsb29wRW5kKTtcbiAgfVxuICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH1cbiAgZnVuY3Rpb24gc2V0KG4pIHtcbiAgICBjb3VudGVyID0gd2l0aGluTGltaXQobik7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgZnVuY3Rpb24gYWRkKG4pIHtcbiAgICByZXR1cm4gY2xvbmUoKS5zZXQoZ2V0KCkgKyBuKTtcbiAgfVxuICBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICByZXR1cm4gQ291bnRlcihtYXgsIGdldCgpLCBsb29wKTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIGdldCxcbiAgICBzZXQsXG4gICAgYWRkLFxuICAgIGNsb25lXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHNpZ24gPSBkaXJlY3Rpb24gPT09ICdydGwnID8gLTEgOiAxO1xuICBmdW5jdGlvbiBhcHBseShuKSB7XG4gICAgcmV0dXJuIG4gKiBzaWduO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgYXBwbHlcbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIERyYWdIYW5kbGVyKGF4aXMsIGRpcmVjdGlvbiwgcm9vdE5vZGUsIG93bmVyRG9jdW1lbnQsIG93bmVyV2luZG93LCB0YXJnZXQsIGRyYWdUcmFja2VyLCBsb2NhdGlvbiwgYW5pbWF0aW9uLCBzY3JvbGxUbywgc2Nyb2xsQm9keSwgc2Nyb2xsVGFyZ2V0LCBpbmRleCwgZXZlbnRIYW5kbGVyLCBwZXJjZW50T2ZWaWV3LCBkcmFnRnJlZSwgZHJhZ1RocmVzaG9sZCwgc2tpcFNuYXBzLCBiYXNlRnJpY3Rpb24sIHdhdGNoRHJhZykge1xuICBjb25zdCB7XG4gICAgY3Jvc3M6IGNyb3NzQXhpc1xuICB9ID0gYXhpcztcbiAgY29uc3QgZm9jdXNOb2RlcyA9IFsnSU5QVVQnLCAnU0VMRUNUJywgJ1RFWFRBUkVBJ107XG4gIGNvbnN0IG5vblBhc3NpdmVFdmVudCA9IHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9O1xuICBjb25zdCBpbml0RXZlbnRzID0gRXZlbnRTdG9yZSgpO1xuICBjb25zdCBkcmFnRXZlbnRzID0gRXZlbnRTdG9yZSgpO1xuICBjb25zdCBnb1RvTmV4dFRocmVzaG9sZCA9IExpbWl0KDUwLCAyMjUpLmNvbnN0cmFpbihwZXJjZW50T2ZWaWV3Lm1lYXN1cmUoMjApKTtcbiAgY29uc3Qgc25hcEZvcmNlQm9vc3QgPSB7XG4gICAgbW91c2U6IDMwMCxcbiAgICB0b3VjaDogNDAwXG4gIH07XG4gIGNvbnN0IGZyZWVGb3JjZUJvb3N0ID0ge1xuICAgIG1vdXNlOiA1MDAsXG4gICAgdG91Y2g6IDYwMFxuICB9O1xuICBjb25zdCBiYXNlU3BlZWQgPSBkcmFnRnJlZSA/IDQzIDogMjU7XG4gIGxldCBpc01vdmluZyA9IGZhbHNlO1xuICBsZXQgc3RhcnRTY3JvbGwgPSAwO1xuICBsZXQgc3RhcnRDcm9zcyA9IDA7XG4gIGxldCBwb2ludGVySXNEb3duID0gZmFsc2U7XG4gIGxldCBwcmV2ZW50U2Nyb2xsID0gZmFsc2U7XG4gIGxldCBwcmV2ZW50Q2xpY2sgPSBmYWxzZTtcbiAgbGV0IGlzTW91c2UgPSBmYWxzZTtcbiAgZnVuY3Rpb24gaW5pdChlbWJsYUFwaSkge1xuICAgIGlmICghd2F0Y2hEcmFnKSByZXR1cm47XG4gICAgZnVuY3Rpb24gZG93bklmQWxsb3dlZChldnQpIHtcbiAgICAgIGlmIChpc0Jvb2xlYW4od2F0Y2hEcmFnKSB8fCB3YXRjaERyYWcoZW1ibGFBcGksIGV2dCkpIGRvd24oZXZ0KTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZSA9IHJvb3ROb2RlO1xuICAgIGluaXRFdmVudHMuYWRkKG5vZGUsICdkcmFnc3RhcnQnLCBldnQgPT4gZXZ0LnByZXZlbnREZWZhdWx0KCksIG5vblBhc3NpdmVFdmVudCkuYWRkKG5vZGUsICd0b3VjaG1vdmUnLCAoKSA9PiB1bmRlZmluZWQsIG5vblBhc3NpdmVFdmVudCkuYWRkKG5vZGUsICd0b3VjaGVuZCcsICgpID0+IHVuZGVmaW5lZCkuYWRkKG5vZGUsICd0b3VjaHN0YXJ0JywgZG93bklmQWxsb3dlZCkuYWRkKG5vZGUsICdtb3VzZWRvd24nLCBkb3duSWZBbGxvd2VkKS5hZGQobm9kZSwgJ3RvdWNoY2FuY2VsJywgdXApLmFkZChub2RlLCAnY29udGV4dG1lbnUnLCB1cCkuYWRkKG5vZGUsICdjbGljaycsIGNsaWNrLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGluaXRFdmVudHMuY2xlYXIoKTtcbiAgICBkcmFnRXZlbnRzLmNsZWFyKCk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRHJhZ0V2ZW50cygpIHtcbiAgICBjb25zdCBub2RlID0gaXNNb3VzZSA/IG93bmVyRG9jdW1lbnQgOiByb290Tm9kZTtcbiAgICBkcmFnRXZlbnRzLmFkZChub2RlLCAndG91Y2htb3ZlJywgbW92ZSwgbm9uUGFzc2l2ZUV2ZW50KS5hZGQobm9kZSwgJ3RvdWNoZW5kJywgdXApLmFkZChub2RlLCAnbW91c2Vtb3ZlJywgbW92ZSwgbm9uUGFzc2l2ZUV2ZW50KS5hZGQobm9kZSwgJ21vdXNldXAnLCB1cCk7XG4gIH1cbiAgZnVuY3Rpb24gaXNGb2N1c05vZGUobm9kZSkge1xuICAgIGNvbnN0IG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZSB8fCAnJztcbiAgICByZXR1cm4gZm9jdXNOb2Rlcy5pbmNsdWRlcyhub2RlTmFtZSk7XG4gIH1cbiAgZnVuY3Rpb24gZm9yY2VCb29zdCgpIHtcbiAgICBjb25zdCBib29zdCA9IGRyYWdGcmVlID8gZnJlZUZvcmNlQm9vc3QgOiBzbmFwRm9yY2VCb29zdDtcbiAgICBjb25zdCB0eXBlID0gaXNNb3VzZSA/ICdtb3VzZScgOiAndG91Y2gnO1xuICAgIHJldHVybiBib29zdFt0eXBlXTtcbiAgfVxuICBmdW5jdGlvbiBhbGxvd2VkRm9yY2UoZm9yY2UsIHRhcmdldENoYW5nZWQpIHtcbiAgICBjb25zdCBuZXh0ID0gaW5kZXguYWRkKG1hdGhTaWduKGZvcmNlKSAqIC0xKTtcbiAgICBjb25zdCBiYXNlRm9yY2UgPSBzY3JvbGxUYXJnZXQuYnlEaXN0YW5jZShmb3JjZSwgIWRyYWdGcmVlKS5kaXN0YW5jZTtcbiAgICBpZiAoZHJhZ0ZyZWUgfHwgbWF0aEFicyhmb3JjZSkgPCBnb1RvTmV4dFRocmVzaG9sZCkgcmV0dXJuIGJhc2VGb3JjZTtcbiAgICBpZiAoc2tpcFNuYXBzICYmIHRhcmdldENoYW5nZWQpIHJldHVybiBiYXNlRm9yY2UgKiAwLjU7XG4gICAgcmV0dXJuIHNjcm9sbFRhcmdldC5ieUluZGV4KG5leHQuZ2V0KCksIDApLmRpc3RhbmNlO1xuICB9XG4gIGZ1bmN0aW9uIGRvd24oZXZ0KSB7XG4gICAgY29uc3QgaXNNb3VzZUV2dCA9IGlzTW91c2VFdmVudChldnQsIG93bmVyV2luZG93KTtcbiAgICBpc01vdXNlID0gaXNNb3VzZUV2dDtcbiAgICBpZiAoaXNNb3VzZUV2dCAmJiBldnQuYnV0dG9uICE9PSAwKSByZXR1cm47XG4gICAgaWYgKGlzRm9jdXNOb2RlKGV2dC50YXJnZXQpKSByZXR1cm47XG4gICAgcHJldmVudENsaWNrID0gZHJhZ0ZyZWUgJiYgaXNNb3VzZUV2dCAmJiAhZXZ0LmJ1dHRvbnMgJiYgaXNNb3Zpbmc7XG4gICAgaXNNb3ZpbmcgPSBkZWx0YUFicyh0YXJnZXQuZ2V0KCksIGxvY2F0aW9uLmdldCgpKSA+PSAyO1xuICAgIHBvaW50ZXJJc0Rvd24gPSB0cnVlO1xuICAgIGRyYWdUcmFja2VyLnBvaW50ZXJEb3duKGV2dCk7XG4gICAgc2Nyb2xsQm9keS51c2VGcmljdGlvbigwKS51c2VEdXJhdGlvbigwKTtcbiAgICB0YXJnZXQuc2V0KGxvY2F0aW9uKTtcbiAgICBhZGREcmFnRXZlbnRzKCk7XG4gICAgc3RhcnRTY3JvbGwgPSBkcmFnVHJhY2tlci5yZWFkUG9pbnQoZXZ0KTtcbiAgICBzdGFydENyb3NzID0gZHJhZ1RyYWNrZXIucmVhZFBvaW50KGV2dCwgY3Jvc3NBeGlzKTtcbiAgICBldmVudEhhbmRsZXIuZW1pdCgncG9pbnRlckRvd24nKTtcbiAgfVxuICBmdW5jdGlvbiBtb3ZlKGV2dCkge1xuICAgIGNvbnN0IGxhc3RTY3JvbGwgPSBkcmFnVHJhY2tlci5yZWFkUG9pbnQoZXZ0KTtcbiAgICBjb25zdCBsYXN0Q3Jvc3MgPSBkcmFnVHJhY2tlci5yZWFkUG9pbnQoZXZ0LCBjcm9zc0F4aXMpO1xuICAgIGNvbnN0IGRpZmZTY3JvbGwgPSBkZWx0YUFicyhsYXN0U2Nyb2xsLCBzdGFydFNjcm9sbCk7XG4gICAgY29uc3QgZGlmZkNyb3NzID0gZGVsdGFBYnMobGFzdENyb3NzLCBzdGFydENyb3NzKTtcbiAgICBpZiAoIXByZXZlbnRTY3JvbGwgJiYgIWlzTW91c2UpIHtcbiAgICAgIGlmICghZXZ0LmNhbmNlbGFibGUpIHJldHVybiB1cChldnQpO1xuICAgICAgcHJldmVudFNjcm9sbCA9IGRpZmZTY3JvbGwgPiBkaWZmQ3Jvc3M7XG4gICAgICBpZiAoIXByZXZlbnRTY3JvbGwpIHJldHVybiB1cChldnQpO1xuICAgIH1cbiAgICBjb25zdCBkaWZmID0gZHJhZ1RyYWNrZXIucG9pbnRlck1vdmUoZXZ0KTtcbiAgICBpZiAoZGlmZlNjcm9sbCA+IGRyYWdUaHJlc2hvbGQpIHByZXZlbnRDbGljayA9IHRydWU7XG4gICAgc2Nyb2xsQm9keS51c2VGcmljdGlvbigwLjMpLnVzZUR1cmF0aW9uKDEpO1xuICAgIGFuaW1hdGlvbi5zdGFydCgpO1xuICAgIHRhcmdldC5hZGQoZGlyZWN0aW9uLmFwcGx5KGRpZmYpKTtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBmdW5jdGlvbiB1cChldnQpIHtcbiAgICBjb25zdCBjdXJyZW50TG9jYXRpb24gPSBzY3JvbGxUYXJnZXQuYnlEaXN0YW5jZSgwLCBmYWxzZSk7XG4gICAgY29uc3QgdGFyZ2V0Q2hhbmdlZCA9IGN1cnJlbnRMb2NhdGlvbi5pbmRleCAhPT0gaW5kZXguZ2V0KCk7XG4gICAgY29uc3QgcmF3Rm9yY2UgPSBkcmFnVHJhY2tlci5wb2ludGVyVXAoZXZ0KSAqIGZvcmNlQm9vc3QoKTtcbiAgICBjb25zdCBmb3JjZSA9IGFsbG93ZWRGb3JjZShkaXJlY3Rpb24uYXBwbHkocmF3Rm9yY2UpLCB0YXJnZXRDaGFuZ2VkKTtcbiAgICBjb25zdCBmb3JjZUZhY3RvciA9IGZhY3RvckFicyhyYXdGb3JjZSwgZm9yY2UpO1xuICAgIGNvbnN0IHNwZWVkID0gYmFzZVNwZWVkIC0gMTAgKiBmb3JjZUZhY3RvcjtcbiAgICBjb25zdCBmcmljdGlvbiA9IGJhc2VGcmljdGlvbiArIGZvcmNlRmFjdG9yIC8gNTA7XG4gICAgcHJldmVudFNjcm9sbCA9IGZhbHNlO1xuICAgIHBvaW50ZXJJc0Rvd24gPSBmYWxzZTtcbiAgICBkcmFnRXZlbnRzLmNsZWFyKCk7XG4gICAgc2Nyb2xsQm9keS51c2VEdXJhdGlvbihzcGVlZCkudXNlRnJpY3Rpb24oZnJpY3Rpb24pO1xuICAgIHNjcm9sbFRvLmRpc3RhbmNlKGZvcmNlLCAhZHJhZ0ZyZWUpO1xuICAgIGlzTW91c2UgPSBmYWxzZTtcbiAgICBldmVudEhhbmRsZXIuZW1pdCgncG9pbnRlclVwJyk7XG4gIH1cbiAgZnVuY3Rpb24gY2xpY2soZXZ0KSB7XG4gICAgaWYgKHByZXZlbnRDbGljaykge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHBvaW50ZXJEb3duKCkge1xuICAgIHJldHVybiBwb2ludGVySXNEb3duO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgaW5pdCxcbiAgICBwb2ludGVyRG93bixcbiAgICBkZXN0cm95XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBEcmFnVHJhY2tlcihheGlzLCBvd25lcldpbmRvdykge1xuICBjb25zdCBsb2dJbnRlcnZhbCA9IDE3MDtcbiAgbGV0IHN0YXJ0RXZlbnQ7XG4gIGxldCBsYXN0RXZlbnQ7XG4gIGZ1bmN0aW9uIHJlYWRUaW1lKGV2dCkge1xuICAgIHJldHVybiBldnQudGltZVN0YW1wO1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRQb2ludChldnQsIGV2dEF4aXMpIHtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IGV2dEF4aXMgfHwgYXhpcy5zY3JvbGw7XG4gICAgY29uc3QgY29vcmQgPSBgY2xpZW50JHtwcm9wZXJ0eSA9PT0gJ3gnID8gJ1gnIDogJ1knfWA7XG4gICAgcmV0dXJuIChpc01vdXNlRXZlbnQoZXZ0LCBvd25lcldpbmRvdykgPyBldnQgOiBldnQudG91Y2hlc1swXSlbY29vcmRdO1xuICB9XG4gIGZ1bmN0aW9uIHBvaW50ZXJEb3duKGV2dCkge1xuICAgIHN0YXJ0RXZlbnQgPSBldnQ7XG4gICAgbGFzdEV2ZW50ID0gZXZ0O1xuICAgIHJldHVybiByZWFkUG9pbnQoZXZ0KTtcbiAgfVxuICBmdW5jdGlvbiBwb2ludGVyTW92ZShldnQpIHtcbiAgICBjb25zdCBkaWZmID0gcmVhZFBvaW50KGV2dCkgLSByZWFkUG9pbnQobGFzdEV2ZW50KTtcbiAgICBjb25zdCBleHBpcmVkID0gcmVhZFRpbWUoZXZ0KSAtIHJlYWRUaW1lKHN0YXJ0RXZlbnQpID4gbG9nSW50ZXJ2YWw7XG4gICAgbGFzdEV2ZW50ID0gZXZ0O1xuICAgIGlmIChleHBpcmVkKSBzdGFydEV2ZW50ID0gZXZ0O1xuICAgIHJldHVybiBkaWZmO1xuICB9XG4gIGZ1bmN0aW9uIHBvaW50ZXJVcChldnQpIHtcbiAgICBpZiAoIXN0YXJ0RXZlbnQgfHwgIWxhc3RFdmVudCkgcmV0dXJuIDA7XG4gICAgY29uc3QgZGlmZkRyYWcgPSByZWFkUG9pbnQobGFzdEV2ZW50KSAtIHJlYWRQb2ludChzdGFydEV2ZW50KTtcbiAgICBjb25zdCBkaWZmVGltZSA9IHJlYWRUaW1lKGV2dCkgLSByZWFkVGltZShzdGFydEV2ZW50KTtcbiAgICBjb25zdCBleHBpcmVkID0gcmVhZFRpbWUoZXZ0KSAtIHJlYWRUaW1lKGxhc3RFdmVudCkgPiBsb2dJbnRlcnZhbDtcbiAgICBjb25zdCBmb3JjZSA9IGRpZmZEcmFnIC8gZGlmZlRpbWU7XG4gICAgY29uc3QgaXNGbGljayA9IGRpZmZUaW1lICYmICFleHBpcmVkICYmIG1hdGhBYnMoZm9yY2UpID4gMC4xO1xuICAgIHJldHVybiBpc0ZsaWNrID8gZm9yY2UgOiAwO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgcG9pbnRlckRvd24sXG4gICAgcG9pbnRlck1vdmUsXG4gICAgcG9pbnRlclVwLFxuICAgIHJlYWRQb2ludFxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gTm9kZVJlY3RzKCkge1xuICBmdW5jdGlvbiBtZWFzdXJlKG5vZGUpIHtcbiAgICBjb25zdCB7XG4gICAgICBvZmZzZXRUb3AsXG4gICAgICBvZmZzZXRMZWZ0LFxuICAgICAgb2Zmc2V0V2lkdGgsXG4gICAgICBvZmZzZXRIZWlnaHRcbiAgICB9ID0gbm9kZTtcbiAgICBjb25zdCBvZmZzZXQgPSB7XG4gICAgICB0b3A6IG9mZnNldFRvcCxcbiAgICAgIHJpZ2h0OiBvZmZzZXRMZWZ0ICsgb2Zmc2V0V2lkdGgsXG4gICAgICBib3R0b206IG9mZnNldFRvcCArIG9mZnNldEhlaWdodCxcbiAgICAgIGxlZnQ6IG9mZnNldExlZnQsXG4gICAgICB3aWR0aDogb2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IG9mZnNldEhlaWdodFxuICAgIH07XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIG1lYXN1cmVcbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIFBlcmNlbnRPZlZpZXcodmlld1NpemUpIHtcbiAgZnVuY3Rpb24gbWVhc3VyZShuKSB7XG4gICAgcmV0dXJuIHZpZXdTaXplICogKG4gLyAxMDApO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgbWVhc3VyZVxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gUmVzaXplSGFuZGxlcihjb250YWluZXIsIGV2ZW50SGFuZGxlciwgb3duZXJXaW5kb3csIHNsaWRlcywgYXhpcywgd2F0Y2hSZXNpemUsIG5vZGVSZWN0cykge1xuICBsZXQgcmVzaXplT2JzZXJ2ZXI7XG4gIGxldCBjb250YWluZXJTaXplO1xuICBsZXQgc2xpZGVTaXplcyA9IFtdO1xuICBsZXQgZGVzdHJveWVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHJlYWRTaXplKG5vZGUpIHtcbiAgICByZXR1cm4gYXhpcy5tZWFzdXJlU2l6ZShub2RlUmVjdHMubWVhc3VyZShub2RlKSk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdChlbWJsYUFwaSkge1xuICAgIGlmICghd2F0Y2hSZXNpemUpIHJldHVybjtcbiAgICBjb250YWluZXJTaXplID0gcmVhZFNpemUoY29udGFpbmVyKTtcbiAgICBzbGlkZVNpemVzID0gc2xpZGVzLm1hcChyZWFkU2l6ZSk7XG4gICAgZnVuY3Rpb24gZGVmYXVsdENhbGxiYWNrKGVudHJpZXMpIHtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBjb25zdCBpc0NvbnRhaW5lciA9IGVudHJ5LnRhcmdldCA9PT0gY29udGFpbmVyO1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gc2xpZGVzLmluZGV4T2YoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgY29uc3QgbGFzdFNpemUgPSBpc0NvbnRhaW5lciA/IGNvbnRhaW5lclNpemUgOiBzbGlkZVNpemVzW3NsaWRlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdTaXplID0gcmVhZFNpemUoaXNDb250YWluZXIgPyBjb250YWluZXIgOiBzbGlkZXNbc2xpZGVJbmRleF0pO1xuICAgICAgICBjb25zdCBkaWZmU2l6ZSA9IG1hdGhBYnMobmV3U2l6ZSAtIGxhc3RTaXplKTtcbiAgICAgICAgaWYgKGRpZmZTaXplID49IDAuNSkge1xuICAgICAgICAgIG93bmVyV2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBlbWJsYUFwaS5yZUluaXQoKTtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlci5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGlmIChpc0Jvb2xlYW4od2F0Y2hSZXNpemUpIHx8IHdhdGNoUmVzaXplKGVtYmxhQXBpLCBlbnRyaWVzKSkge1xuICAgICAgICBkZWZhdWx0Q2FsbGJhY2soZW50cmllcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgb2JzZXJ2ZU5vZGVzID0gW2NvbnRhaW5lcl0uY29uY2F0KHNsaWRlcyk7XG4gICAgb2JzZXJ2ZU5vZGVzLmZvckVhY2gobm9kZSA9PiByZXNpemVPYnNlcnZlci5vYnNlcnZlKG5vZGUpKTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmIChyZXNpemVPYnNlcnZlcikgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIFNjcm9sbEJvZHkobG9jYXRpb24sIG9mZnNldExvY2F0aW9uLCB0YXJnZXQsIGJhc2VEdXJhdGlvbiwgYmFzZUZyaWN0aW9uKSB7XG4gIGxldCBib2R5VmVsb2NpdHkgPSAwO1xuICBsZXQgc2Nyb2xsRGlyZWN0aW9uID0gMDtcbiAgbGV0IHNjcm9sbER1cmF0aW9uID0gYmFzZUR1cmF0aW9uO1xuICBsZXQgc2Nyb2xsRnJpY3Rpb24gPSBiYXNlRnJpY3Rpb247XG4gIGxldCByYXdMb2NhdGlvbiA9IGxvY2F0aW9uLmdldCgpO1xuICBsZXQgcmF3TG9jYXRpb25QcmV2aW91cyA9IDA7XG4gIGZ1bmN0aW9uIHNlZWsoKSB7XG4gICAgY29uc3QgZGlmZiA9IHRhcmdldC5nZXQoKSAtIGxvY2F0aW9uLmdldCgpO1xuICAgIGNvbnN0IGlzSW5zdGFudCA9ICFzY3JvbGxEdXJhdGlvbjtcbiAgICBsZXQgZGlyZWN0aW9uRGlmZiA9IDA7XG4gICAgaWYgKGlzSW5zdGFudCkge1xuICAgICAgYm9keVZlbG9jaXR5ID0gMDtcbiAgICAgIGxvY2F0aW9uLnNldCh0YXJnZXQpO1xuICAgICAgZGlyZWN0aW9uRGlmZiA9IGRpZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHlWZWxvY2l0eSArPSBkaWZmIC8gc2Nyb2xsRHVyYXRpb247XG4gICAgICBib2R5VmVsb2NpdHkgKj0gc2Nyb2xsRnJpY3Rpb247XG4gICAgICByYXdMb2NhdGlvbiArPSBib2R5VmVsb2NpdHk7XG4gICAgICBsb2NhdGlvbi5hZGQoYm9keVZlbG9jaXR5KTtcbiAgICAgIGRpcmVjdGlvbkRpZmYgPSByYXdMb2NhdGlvbiAtIHJhd0xvY2F0aW9uUHJldmlvdXM7XG4gICAgfVxuICAgIHNjcm9sbERpcmVjdGlvbiA9IG1hdGhTaWduKGRpcmVjdGlvbkRpZmYpO1xuICAgIHJhd0xvY2F0aW9uUHJldmlvdXMgPSByYXdMb2NhdGlvbjtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICBmdW5jdGlvbiBzZXR0bGVkKCkge1xuICAgIGNvbnN0IGRpZmYgPSB0YXJnZXQuZ2V0KCkgLSBvZmZzZXRMb2NhdGlvbi5nZXQoKTtcbiAgICByZXR1cm4gbWF0aEFicyhkaWZmKSA8IDAuMDAxO1xuICB9XG4gIGZ1bmN0aW9uIGR1cmF0aW9uKCkge1xuICAgIHJldHVybiBzY3JvbGxEdXJhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBkaXJlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNjcm9sbERpcmVjdGlvbjtcbiAgfVxuICBmdW5jdGlvbiB2ZWxvY2l0eSgpIHtcbiAgICByZXR1cm4gYm9keVZlbG9jaXR5O1xuICB9XG4gIGZ1bmN0aW9uIHVzZUJhc2VEdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdXNlRHVyYXRpb24oYmFzZUR1cmF0aW9uKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VCYXNlRnJpY3Rpb24oKSB7XG4gICAgcmV0dXJuIHVzZUZyaWN0aW9uKGJhc2VGcmljdGlvbik7XG4gIH1cbiAgZnVuY3Rpb24gdXNlRHVyYXRpb24obikge1xuICAgIHNjcm9sbER1cmF0aW9uID0gbjtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICBmdW5jdGlvbiB1c2VGcmljdGlvbihuKSB7XG4gICAgc2Nyb2xsRnJpY3Rpb24gPSBuO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgZGlyZWN0aW9uLFxuICAgIGR1cmF0aW9uLFxuICAgIHZlbG9jaXR5LFxuICAgIHNlZWssXG4gICAgc2V0dGxlZCxcbiAgICB1c2VCYXNlRnJpY3Rpb24sXG4gICAgdXNlQmFzZUR1cmF0aW9uLFxuICAgIHVzZUZyaWN0aW9uLFxuICAgIHVzZUR1cmF0aW9uXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTY3JvbGxCb3VuZHMobGltaXQsIGxvY2F0aW9uLCB0YXJnZXQsIHNjcm9sbEJvZHksIHBlcmNlbnRPZlZpZXcpIHtcbiAgY29uc3QgcHVsbEJhY2tUaHJlc2hvbGQgPSBwZXJjZW50T2ZWaWV3Lm1lYXN1cmUoMTApO1xuICBjb25zdCBlZGdlT2Zmc2V0VG9sZXJhbmNlID0gcGVyY2VudE9mVmlldy5tZWFzdXJlKDUwKTtcbiAgY29uc3QgZnJpY3Rpb25MaW1pdCA9IExpbWl0KDAuMSwgMC45OSk7XG4gIGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBzaG91bGRDb25zdHJhaW4oKSB7XG4gICAgaWYgKGRpc2FibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFsaW1pdC5yZWFjaGVkQW55KHRhcmdldC5nZXQoKSkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWxpbWl0LnJlYWNoZWRBbnkobG9jYXRpb24uZ2V0KCkpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gY29uc3RyYWluKHBvaW50ZXJEb3duKSB7XG4gICAgaWYgKCFzaG91bGRDb25zdHJhaW4oKSkgcmV0dXJuO1xuICAgIGNvbnN0IGVkZ2UgPSBsaW1pdC5yZWFjaGVkTWluKGxvY2F0aW9uLmdldCgpKSA/ICdtaW4nIDogJ21heCc7XG4gICAgY29uc3QgZGlmZlRvRWRnZSA9IG1hdGhBYnMobGltaXRbZWRnZV0gLSBsb2NhdGlvbi5nZXQoKSk7XG4gICAgY29uc3QgZGlmZlRvVGFyZ2V0ID0gdGFyZ2V0LmdldCgpIC0gbG9jYXRpb24uZ2V0KCk7XG4gICAgY29uc3QgZnJpY3Rpb24gPSBmcmljdGlvbkxpbWl0LmNvbnN0cmFpbihkaWZmVG9FZGdlIC8gZWRnZU9mZnNldFRvbGVyYW5jZSk7XG4gICAgdGFyZ2V0LnN1YnRyYWN0KGRpZmZUb1RhcmdldCAqIGZyaWN0aW9uKTtcbiAgICBpZiAoIXBvaW50ZXJEb3duICYmIG1hdGhBYnMoZGlmZlRvVGFyZ2V0KSA8IHB1bGxCYWNrVGhyZXNob2xkKSB7XG4gICAgICB0YXJnZXQuc2V0KGxpbWl0LmNvbnN0cmFpbih0YXJnZXQuZ2V0KCkpKTtcbiAgICAgIHNjcm9sbEJvZHkudXNlRHVyYXRpb24oMjUpLnVzZUJhc2VGcmljdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVBY3RpdmUoYWN0aXZlKSB7XG4gICAgZGlzYWJsZWQgPSAhYWN0aXZlO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgY29uc3RyYWluLFxuICAgIHRvZ2dsZUFjdGl2ZVxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gU2Nyb2xsQ29udGFpbih2aWV3U2l6ZSwgY29udGVudFNpemUsIHNuYXBzQWxpZ25lZCwgY29udGFpblNjcm9sbCwgcGl4ZWxUb2xlcmFuY2UpIHtcbiAgY29uc3Qgc2Nyb2xsQm91bmRzID0gTGltaXQoLWNvbnRlbnRTaXplICsgdmlld1NpemUsIDApO1xuICBjb25zdCBzbmFwc0JvdW5kZWQgPSBtZWFzdXJlQm91bmRlZCgpO1xuICBjb25zdCBzY3JvbGxDb250YWluTGltaXQgPSBmaW5kU2Nyb2xsQ29udGFpbkxpbWl0KCk7XG4gIGNvbnN0IHNuYXBzQ29udGFpbmVkID0gbWVhc3VyZUNvbnRhaW5lZCgpO1xuICBmdW5jdGlvbiBmaW5kU2Nyb2xsQ29udGFpbkxpbWl0KCkge1xuICAgIGNvbnN0IHN0YXJ0U25hcCA9IHNuYXBzQm91bmRlZFswXTtcbiAgICBjb25zdCBlbmRTbmFwID0gYXJyYXlMYXN0KHNuYXBzQm91bmRlZCk7XG4gICAgY29uc3QgbWluID0gc25hcHNCb3VuZGVkLmxhc3RJbmRleE9mKHN0YXJ0U25hcCk7XG4gICAgY29uc3QgbWF4ID0gc25hcHNCb3VuZGVkLmluZGV4T2YoZW5kU25hcCkgKyAxO1xuICAgIHJldHVybiBMaW1pdChtaW4sIG1heCk7XG4gIH1cbiAgZnVuY3Rpb24gbWVhc3VyZUJvdW5kZWQoKSB7XG4gICAgcmV0dXJuIHNuYXBzQWxpZ25lZC5tYXAoKHNuYXBBbGlnbmVkLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgaXNGaXJzdCA9ICFpbmRleDtcbiAgICAgIGNvbnN0IGlzTGFzdCA9IGFycmF5SXNMYXN0SW5kZXgoc25hcHNBbGlnbmVkLCBpbmRleCk7XG4gICAgICBpZiAoaXNGaXJzdCkgcmV0dXJuIHNjcm9sbEJvdW5kcy5tYXg7XG4gICAgICBpZiAoaXNMYXN0KSByZXR1cm4gc2Nyb2xsQm91bmRzLm1pbjtcbiAgICAgIHJldHVybiBzY3JvbGxCb3VuZHMuY29uc3RyYWluKHNuYXBBbGlnbmVkKTtcbiAgICB9KS5tYXAoc2Nyb2xsQm91bmQgPT4gcGFyc2VGbG9hdChzY3JvbGxCb3VuZC50b0ZpeGVkKDMpKSk7XG4gIH1cbiAgZnVuY3Rpb24gbWVhc3VyZUNvbnRhaW5lZCgpIHtcbiAgICBpZiAoY29udGVudFNpemUgPD0gdmlld1NpemUgKyBwaXhlbFRvbGVyYW5jZSkgcmV0dXJuIFtzY3JvbGxCb3VuZHMubWF4XTtcbiAgICBpZiAoY29udGFpblNjcm9sbCA9PT0gJ2tlZXBTbmFwcycpIHJldHVybiBzbmFwc0JvdW5kZWQ7XG4gICAgY29uc3Qge1xuICAgICAgbWluLFxuICAgICAgbWF4XG4gICAgfSA9IHNjcm9sbENvbnRhaW5MaW1pdDtcbiAgICByZXR1cm4gc25hcHNCb3VuZGVkLnNsaWNlKG1pbiwgbWF4KTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIHNuYXBzQ29udGFpbmVkLFxuICAgIHNjcm9sbENvbnRhaW5MaW1pdFxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gU2Nyb2xsTGltaXQoY29udGVudFNpemUsIHNjcm9sbFNuYXBzLCBsb29wKSB7XG4gIGNvbnN0IG1heCA9IHNjcm9sbFNuYXBzWzBdO1xuICBjb25zdCBtaW4gPSBsb29wID8gbWF4IC0gY29udGVudFNpemUgOiBhcnJheUxhc3Qoc2Nyb2xsU25hcHMpO1xuICBjb25zdCBsaW1pdCA9IExpbWl0KG1pbiwgbWF4KTtcbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBsaW1pdFxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gU2Nyb2xsTG9vcGVyKGNvbnRlbnRTaXplLCBsaW1pdCwgb2Zmc2V0TG9jYXRpb24sIHZlY3RvcnMpIHtcbiAgY29uc3Qgam9pbnRTYWZldHkgPSAwLjE7XG4gIGNvbnN0IG1pbiA9IGxpbWl0Lm1pbiArIGpvaW50U2FmZXR5O1xuICBjb25zdCBtYXggPSBsaW1pdC5tYXggKyBqb2ludFNhZmV0eTtcbiAgY29uc3Qge1xuICAgIHJlYWNoZWRNaW4sXG4gICAgcmVhY2hlZE1heFxuICB9ID0gTGltaXQobWluLCBtYXgpO1xuICBmdW5jdGlvbiBzaG91bGRMb29wKGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT09IDEpIHJldHVybiByZWFjaGVkTWF4KG9mZnNldExvY2F0aW9uLmdldCgpKTtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAtMSkgcmV0dXJuIHJlYWNoZWRNaW4ob2Zmc2V0TG9jYXRpb24uZ2V0KCkpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBsb29wKGRpcmVjdGlvbikge1xuICAgIGlmICghc2hvdWxkTG9vcChkaXJlY3Rpb24pKSByZXR1cm47XG4gICAgY29uc3QgbG9vcERpc3RhbmNlID0gY29udGVudFNpemUgKiAoZGlyZWN0aW9uICogLTEpO1xuICAgIHZlY3RvcnMuZm9yRWFjaCh2ID0+IHYuYWRkKGxvb3BEaXN0YW5jZSkpO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgbG9vcFxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gU2Nyb2xsUHJvZ3Jlc3MobGltaXQpIHtcbiAgY29uc3Qge1xuICAgIG1heCxcbiAgICBsZW5ndGhcbiAgfSA9IGxpbWl0O1xuICBmdW5jdGlvbiBnZXQobikge1xuICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IG4gLSBtYXg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IGN1cnJlbnRMb2NhdGlvbiAvIC1sZW5ndGggOiAwO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgZ2V0XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTY3JvbGxTbmFwcyhheGlzLCBhbGlnbm1lbnQsIGNvbnRhaW5lclJlY3QsIHNsaWRlUmVjdHMsIHNsaWRlc1RvU2Nyb2xsKSB7XG4gIGNvbnN0IHtcbiAgICBzdGFydEVkZ2UsXG4gICAgZW5kRWRnZVxuICB9ID0gYXhpcztcbiAgY29uc3Qge1xuICAgIGdyb3VwU2xpZGVzXG4gIH0gPSBzbGlkZXNUb1Njcm9sbDtcbiAgY29uc3QgYWxpZ25tZW50cyA9IG1lYXN1cmVTaXplcygpLm1hcChhbGlnbm1lbnQubWVhc3VyZSk7XG4gIGNvbnN0IHNuYXBzID0gbWVhc3VyZVVuYWxpZ25lZCgpO1xuICBjb25zdCBzbmFwc0FsaWduZWQgPSBtZWFzdXJlQWxpZ25lZCgpO1xuICBmdW5jdGlvbiBtZWFzdXJlU2l6ZXMoKSB7XG4gICAgcmV0dXJuIGdyb3VwU2xpZGVzKHNsaWRlUmVjdHMpLm1hcChyZWN0cyA9PiBhcnJheUxhc3QocmVjdHMpW2VuZEVkZ2VdIC0gcmVjdHNbMF1bc3RhcnRFZGdlXSkubWFwKG1hdGhBYnMpO1xuICB9XG4gIGZ1bmN0aW9uIG1lYXN1cmVVbmFsaWduZWQoKSB7XG4gICAgcmV0dXJuIHNsaWRlUmVjdHMubWFwKHJlY3QgPT4gY29udGFpbmVyUmVjdFtzdGFydEVkZ2VdIC0gcmVjdFtzdGFydEVkZ2VdKS5tYXAoc25hcCA9PiAtbWF0aEFicyhzbmFwKSk7XG4gIH1cbiAgZnVuY3Rpb24gbWVhc3VyZUFsaWduZWQoKSB7XG4gICAgcmV0dXJuIGdyb3VwU2xpZGVzKHNuYXBzKS5tYXAoZyA9PiBnWzBdKS5tYXAoKHNuYXAsIGluZGV4KSA9PiBzbmFwICsgYWxpZ25tZW50c1tpbmRleF0pO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgc25hcHMsXG4gICAgc25hcHNBbGlnbmVkXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTbGlkZVJlZ2lzdHJ5KGNvbnRhaW5TbmFwcywgY29udGFpblNjcm9sbCwgc2Nyb2xsU25hcHMsIHNjcm9sbENvbnRhaW5MaW1pdCwgc2xpZGVzVG9TY3JvbGwsIHNsaWRlSW5kZXhlcykge1xuICBjb25zdCB7XG4gICAgZ3JvdXBTbGlkZXNcbiAgfSA9IHNsaWRlc1RvU2Nyb2xsO1xuICBjb25zdCB7XG4gICAgbWluLFxuICAgIG1heFxuICB9ID0gc2Nyb2xsQ29udGFpbkxpbWl0O1xuICBjb25zdCBzbGlkZVJlZ2lzdHJ5ID0gY3JlYXRlU2xpZGVSZWdpc3RyeSgpO1xuICBmdW5jdGlvbiBjcmVhdGVTbGlkZVJlZ2lzdHJ5KCkge1xuICAgIGNvbnN0IGdyb3VwZWRTbGlkZUluZGV4ZXMgPSBncm91cFNsaWRlcyhzbGlkZUluZGV4ZXMpO1xuICAgIGNvbnN0IGRvTm90Q29udGFpbiA9ICFjb250YWluU25hcHMgfHwgY29udGFpblNjcm9sbCA9PT0gJ2tlZXBTbmFwcyc7XG4gICAgaWYgKHNjcm9sbFNuYXBzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIFtzbGlkZUluZGV4ZXNdO1xuICAgIGlmIChkb05vdENvbnRhaW4pIHJldHVybiBncm91cGVkU2xpZGVJbmRleGVzO1xuICAgIHJldHVybiBncm91cGVkU2xpZGVJbmRleGVzLnNsaWNlKG1pbiwgbWF4KS5tYXAoKGdyb3VwLCBpbmRleCwgZ3JvdXBzKSA9PiB7XG4gICAgICBjb25zdCBpc0ZpcnN0ID0gIWluZGV4O1xuICAgICAgY29uc3QgaXNMYXN0ID0gYXJyYXlJc0xhc3RJbmRleChncm91cHMsIGluZGV4KTtcbiAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gYXJyYXlMYXN0KGdyb3Vwc1swXSkgKyAxO1xuICAgICAgICByZXR1cm4gYXJyYXlGcm9tTnVtYmVyKHJhbmdlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0xhc3QpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBhcnJheUxhc3RJbmRleChzbGlkZUluZGV4ZXMpIC0gYXJyYXlMYXN0KGdyb3VwcylbMF0gKyAxO1xuICAgICAgICByZXR1cm4gYXJyYXlGcm9tTnVtYmVyKHJhbmdlLCBhcnJheUxhc3QoZ3JvdXBzKVswXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfSk7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBzbGlkZVJlZ2lzdHJ5XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTY3JvbGxUYXJnZXQobG9vcCwgc2Nyb2xsU25hcHMsIGNvbnRlbnRTaXplLCBsaW1pdCwgdGFyZ2V0VmVjdG9yKSB7XG4gIGNvbnN0IHtcbiAgICByZWFjaGVkQW55LFxuICAgIHJlbW92ZU9mZnNldCxcbiAgICBjb25zdHJhaW5cbiAgfSA9IGxpbWl0O1xuICBmdW5jdGlvbiBtaW5EaXN0YW5jZShkaXN0YW5jZXMpIHtcbiAgICByZXR1cm4gZGlzdGFuY2VzLmNvbmNhdCgpLnNvcnQoKGEsIGIpID0+IG1hdGhBYnMoYSkgLSBtYXRoQWJzKGIpKVswXTtcbiAgfVxuICBmdW5jdGlvbiBmaW5kVGFyZ2V0U25hcCh0YXJnZXQpIHtcbiAgICBjb25zdCBkaXN0YW5jZSA9IGxvb3AgPyByZW1vdmVPZmZzZXQodGFyZ2V0KSA6IGNvbnN0cmFpbih0YXJnZXQpO1xuICAgIGNvbnN0IGFzY0RpZmZzVG9TbmFwcyA9IHNjcm9sbFNuYXBzLm1hcChzY3JvbGxTbmFwID0+IHNjcm9sbFNuYXAgLSBkaXN0YW5jZSkubWFwKGRpZmZUb1NuYXAgPT4gc2hvcnRjdXQoZGlmZlRvU25hcCwgMCkpLm1hcCgoZGlmZiwgaSkgPT4gKHtcbiAgICAgIGRpZmYsXG4gICAgICBpbmRleDogaVxuICAgIH0pKS5zb3J0KChkMSwgZDIpID0+IG1hdGhBYnMoZDEuZGlmZikgLSBtYXRoQWJzKGQyLmRpZmYpKTtcbiAgICBjb25zdCB7XG4gICAgICBpbmRleFxuICAgIH0gPSBhc2NEaWZmc1RvU25hcHNbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4LFxuICAgICAgZGlzdGFuY2VcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHNob3J0Y3V0KHRhcmdldCwgZGlyZWN0aW9uKSB7XG4gICAgY29uc3QgdGFyZ2V0cyA9IFt0YXJnZXQsIHRhcmdldCArIGNvbnRlbnRTaXplLCB0YXJnZXQgLSBjb250ZW50U2l6ZV07XG4gICAgaWYgKCFsb29wKSByZXR1cm4gdGFyZ2V0c1swXTtcbiAgICBpZiAoIWRpcmVjdGlvbikgcmV0dXJuIG1pbkRpc3RhbmNlKHRhcmdldHMpO1xuICAgIGNvbnN0IG1hdGNoaW5nVGFyZ2V0cyA9IHRhcmdldHMuZmlsdGVyKHQgPT4gbWF0aFNpZ24odCkgPT09IGRpcmVjdGlvbik7XG4gICAgaWYgKG1hdGNoaW5nVGFyZ2V0cy5sZW5ndGgpIHJldHVybiBtaW5EaXN0YW5jZShtYXRjaGluZ1RhcmdldHMpO1xuICAgIHJldHVybiBhcnJheUxhc3QodGFyZ2V0cykgLSBjb250ZW50U2l6ZTtcbiAgfVxuICBmdW5jdGlvbiBieUluZGV4KGluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICBjb25zdCBkaWZmVG9TbmFwID0gc2Nyb2xsU25hcHNbaW5kZXhdIC0gdGFyZ2V0VmVjdG9yLmdldCgpO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gc2hvcnRjdXQoZGlmZlRvU25hcCwgZGlyZWN0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgaW5kZXgsXG4gICAgICBkaXN0YW5jZVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gYnlEaXN0YW5jZShkaXN0YW5jZSwgc25hcCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFZlY3Rvci5nZXQoKSArIGRpc3RhbmNlO1xuICAgIGNvbnN0IHtcbiAgICAgIGluZGV4LFxuICAgICAgZGlzdGFuY2U6IHRhcmdldFNuYXBEaXN0YW5jZVxuICAgIH0gPSBmaW5kVGFyZ2V0U25hcCh0YXJnZXQpO1xuICAgIGNvbnN0IHJlYWNoZWRCb3VuZCA9ICFsb29wICYmIHJlYWNoZWRBbnkodGFyZ2V0KTtcbiAgICBpZiAoIXNuYXAgfHwgcmVhY2hlZEJvdW5kKSByZXR1cm4ge1xuICAgICAgaW5kZXgsXG4gICAgICBkaXN0YW5jZVxuICAgIH07XG4gICAgY29uc3QgZGlmZlRvU25hcCA9IHNjcm9sbFNuYXBzW2luZGV4XSAtIHRhcmdldFNuYXBEaXN0YW5jZTtcbiAgICBjb25zdCBzbmFwRGlzdGFuY2UgPSBkaXN0YW5jZSArIHNob3J0Y3V0KGRpZmZUb1NuYXAsIDApO1xuICAgIHJldHVybiB7XG4gICAgICBpbmRleCxcbiAgICAgIGRpc3RhbmNlOiBzbmFwRGlzdGFuY2VcbiAgICB9O1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgYnlEaXN0YW5jZSxcbiAgICBieUluZGV4LFxuICAgIHNob3J0Y3V0XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTY3JvbGxUbyhhbmltYXRpb24sIGluZGV4Q3VycmVudCwgaW5kZXhQcmV2aW91cywgc2Nyb2xsQm9keSwgc2Nyb2xsVGFyZ2V0LCB0YXJnZXRWZWN0b3IsIGV2ZW50SGFuZGxlcikge1xuICBmdW5jdGlvbiBzY3JvbGxUbyh0YXJnZXQpIHtcbiAgICBjb25zdCBkaXN0YW5jZURpZmYgPSB0YXJnZXQuZGlzdGFuY2U7XG4gICAgY29uc3QgaW5kZXhEaWZmID0gdGFyZ2V0LmluZGV4ICE9PSBpbmRleEN1cnJlbnQuZ2V0KCk7XG4gICAgdGFyZ2V0VmVjdG9yLmFkZChkaXN0YW5jZURpZmYpO1xuICAgIGlmIChkaXN0YW5jZURpZmYpIHtcbiAgICAgIGlmIChzY3JvbGxCb2R5LmR1cmF0aW9uKCkpIHtcbiAgICAgICAgYW5pbWF0aW9uLnN0YXJ0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpb24udXBkYXRlKCk7XG4gICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoMSk7XG4gICAgICAgIGFuaW1hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluZGV4RGlmZikge1xuICAgICAgaW5kZXhQcmV2aW91cy5zZXQoaW5kZXhDdXJyZW50LmdldCgpKTtcbiAgICAgIGluZGV4Q3VycmVudC5zZXQodGFyZ2V0LmluZGV4KTtcbiAgICAgIGV2ZW50SGFuZGxlci5lbWl0KCdzZWxlY3QnKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGlzdGFuY2Uobiwgc25hcCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHNjcm9sbFRhcmdldC5ieURpc3RhbmNlKG4sIHNuYXApO1xuICAgIHNjcm9sbFRvKHRhcmdldCk7XG4gIH1cbiAgZnVuY3Rpb24gaW5kZXgobiwgZGlyZWN0aW9uKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5kZXggPSBpbmRleEN1cnJlbnQuY2xvbmUoKS5zZXQobik7XG4gICAgY29uc3QgdGFyZ2V0ID0gc2Nyb2xsVGFyZ2V0LmJ5SW5kZXgodGFyZ2V0SW5kZXguZ2V0KCksIGRpcmVjdGlvbik7XG4gICAgc2Nyb2xsVG8odGFyZ2V0KTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIGRpc3RhbmNlLFxuICAgIGluZGV4XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTbGlkZUZvY3VzKHJvb3QsIHNsaWRlcywgc2xpZGVSZWdpc3RyeSwgc2Nyb2xsVG8sIHNjcm9sbEJvZHksIGV2ZW50U3RvcmUpIHtcbiAgbGV0IGxhc3RUYWJQcmVzc1RpbWUgPSAwO1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGV2ZW50U3RvcmUuYWRkKGRvY3VtZW50LCAna2V5ZG93bicsIHJlZ2lzdGVyVGFiUHJlc3MsIGZhbHNlKTtcbiAgICBzbGlkZXMuZm9yRWFjaChhZGRTbGlkZUZvY3VzRXZlbnQpO1xuICB9XG4gIGZ1bmN0aW9uIHJlZ2lzdGVyVGFiUHJlc3MoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuY29kZSA9PT0gJ1RhYicpIGxhc3RUYWJQcmVzc1RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuICBmdW5jdGlvbiBhZGRTbGlkZUZvY3VzRXZlbnQoc2xpZGUpIHtcbiAgICBjb25zdCBmb2N1cyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG5vd1RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIGNvbnN0IGRpZmZUaW1lID0gbm93VGltZSAtIGxhc3RUYWJQcmVzc1RpbWU7XG4gICAgICBpZiAoZGlmZlRpbWUgPiAxMCkgcmV0dXJuO1xuICAgICAgcm9vdC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgIGNvbnN0IGluZGV4ID0gc2xpZGVzLmluZGV4T2Yoc2xpZGUpO1xuICAgICAgY29uc3QgZ3JvdXAgPSBzbGlkZVJlZ2lzdHJ5LmZpbmRJbmRleChncm91cCA9PiBncm91cC5pbmNsdWRlcyhpbmRleCkpO1xuICAgICAgaWYgKCFpc051bWJlcihncm91cCkpIHJldHVybjtcbiAgICAgIHNjcm9sbEJvZHkudXNlRHVyYXRpb24oMCk7XG4gICAgICBzY3JvbGxUby5pbmRleChncm91cCwgMCk7XG4gICAgfTtcbiAgICBldmVudFN0b3JlLmFkZChzbGlkZSwgJ2ZvY3VzJywgZm9jdXMsIHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBpbml0XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBWZWN0b3IxRChpbml0aWFsVmFsdWUpIHtcbiAgbGV0IHZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIHNldChuKSB7XG4gICAgdmFsdWUgPSBub3JtYWxpemVJbnB1dChuKTtcbiAgfVxuICBmdW5jdGlvbiBhZGQobikge1xuICAgIHZhbHVlICs9IG5vcm1hbGl6ZUlucHV0KG4pO1xuICB9XG4gIGZ1bmN0aW9uIHN1YnRyYWN0KG4pIHtcbiAgICB2YWx1ZSAtPSBub3JtYWxpemVJbnB1dChuKTtcbiAgfVxuICBmdW5jdGlvbiBub3JtYWxpemVJbnB1dChuKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKG4pID8gbiA6IG4uZ2V0KCk7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBnZXQsXG4gICAgc2V0LFxuICAgIGFkZCxcbiAgICBzdWJ0cmFjdFxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gVHJhbnNsYXRlKGF4aXMsIGRpcmVjdGlvbiwgY29udGFpbmVyKSB7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IGF4aXMuc2Nyb2xsID09PSAneCcgPyB4IDogeTtcbiAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBjb250YWluZXIuc3R5bGU7XG4gIGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiB4KG4pIHtcbiAgICByZXR1cm4gYHRyYW5zbGF0ZTNkKCR7bn1weCwwcHgsMHB4KWA7XG4gIH1cbiAgZnVuY3Rpb24geShuKSB7XG4gICAgcmV0dXJuIGB0cmFuc2xhdGUzZCgwcHgsJHtufXB4LDBweClgO1xuICB9XG4gIGZ1bmN0aW9uIHRvKHRhcmdldCkge1xuICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xuICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zbGF0ZShkaXJlY3Rpb24uYXBwbHkodGFyZ2V0KSk7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlQWN0aXZlKGFjdGl2ZSkge1xuICAgIGRpc2FibGVkID0gIWFjdGl2ZTtcbiAgfVxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBpZiAoZGlzYWJsZWQpIHJldHVybjtcbiAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICBpZiAoIWNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykpIGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBjbGVhcixcbiAgICB0byxcbiAgICB0b2dnbGVBY3RpdmVcbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIFNsaWRlTG9vcGVyKGF4aXMsIGRpcmVjdGlvbiwgdmlld1NpemUsIGNvbnRlbnRTaXplLCBzbGlkZVNpemVzLCBzbGlkZVNpemVzV2l0aEdhcHMsIHNuYXBzLCBzY3JvbGxTbmFwcywgb2Zmc2V0TG9jYXRpb24sIHNsaWRlcykge1xuICBjb25zdCByb3VuZGluZ1NhZmV0eSA9IDAuNTtcbiAgY29uc3QgYXNjSXRlbXMgPSBhcnJheUtleXMoc2xpZGVTaXplc1dpdGhHYXBzKTtcbiAgY29uc3QgZGVzY0l0ZW1zID0gYXJyYXlLZXlzKHNsaWRlU2l6ZXNXaXRoR2FwcykucmV2ZXJzZSgpO1xuICBjb25zdCBsb29wUG9pbnRzID0gc3RhcnRQb2ludHMoKS5jb25jYXQoZW5kUG9pbnRzKCkpO1xuICBmdW5jdGlvbiByZW1vdmVTbGlkZVNpemVzKGluZGV4ZXMsIGZyb20pIHtcbiAgICByZXR1cm4gaW5kZXhlcy5yZWR1Y2UoKGEsIGkpID0+IHtcbiAgICAgIHJldHVybiBhIC0gc2xpZGVTaXplc1dpdGhHYXBzW2ldO1xuICAgIH0sIGZyb20pO1xuICB9XG4gIGZ1bmN0aW9uIHNsaWRlc0luR2FwKGluZGV4ZXMsIGdhcCkge1xuICAgIHJldHVybiBpbmRleGVzLnJlZHVjZSgoYSwgaSkgPT4ge1xuICAgICAgY29uc3QgcmVtYWluaW5nR2FwID0gcmVtb3ZlU2xpZGVTaXplcyhhLCBnYXApO1xuICAgICAgcmV0dXJuIHJlbWFpbmluZ0dhcCA+IDAgPyBhLmNvbmNhdChbaV0pIDogYTtcbiAgICB9LCBbXSk7XG4gIH1cbiAgZnVuY3Rpb24gZmluZFNsaWRlQm91bmRzKG9mZnNldCkge1xuICAgIHJldHVybiBzbmFwcy5tYXAoKHNuYXAsIGluZGV4KSA9PiAoe1xuICAgICAgc3RhcnQ6IHNuYXAgLSBzbGlkZVNpemVzW2luZGV4XSArIHJvdW5kaW5nU2FmZXR5ICsgb2Zmc2V0LFxuICAgICAgZW5kOiBzbmFwICsgdmlld1NpemUgLSByb3VuZGluZ1NhZmV0eSArIG9mZnNldFxuICAgIH0pKTtcbiAgfVxuICBmdW5jdGlvbiBmaW5kTG9vcFBvaW50cyhpbmRleGVzLCBvZmZzZXQsIGlzRW5kRWRnZSkge1xuICAgIGNvbnN0IHNsaWRlQm91bmRzID0gZmluZFNsaWRlQm91bmRzKG9mZnNldCk7XG4gICAgcmV0dXJuIGluZGV4ZXMubWFwKGluZGV4ID0+IHtcbiAgICAgIGNvbnN0IGluaXRpYWwgPSBpc0VuZEVkZ2UgPyAwIDogLWNvbnRlbnRTaXplO1xuICAgICAgY29uc3QgYWx0ZXJlZCA9IGlzRW5kRWRnZSA/IGNvbnRlbnRTaXplIDogMDtcbiAgICAgIGNvbnN0IGJvdW5kRWRnZSA9IGlzRW5kRWRnZSA/ICdlbmQnIDogJ3N0YXJ0JztcbiAgICAgIGNvbnN0IGxvb3BQb2ludCA9IHNsaWRlQm91bmRzW2luZGV4XVtib3VuZEVkZ2VdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIGxvb3BQb2ludCxcbiAgICAgICAgc2xpZGVMb2NhdGlvbjogVmVjdG9yMUQoLTEpLFxuICAgICAgICB0cmFuc2xhdGU6IFRyYW5zbGF0ZShheGlzLCBkaXJlY3Rpb24sIHNsaWRlc1tpbmRleF0pLFxuICAgICAgICB0YXJnZXQ6ICgpID0+IG9mZnNldExvY2F0aW9uLmdldCgpID4gbG9vcFBvaW50ID8gaW5pdGlhbCA6IGFsdGVyZWRcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gc3RhcnRQb2ludHMoKSB7XG4gICAgY29uc3QgZ2FwID0gc2Nyb2xsU25hcHNbMF07XG4gICAgY29uc3QgaW5kZXhlcyA9IHNsaWRlc0luR2FwKGRlc2NJdGVtcywgZ2FwKTtcbiAgICByZXR1cm4gZmluZExvb3BQb2ludHMoaW5kZXhlcywgY29udGVudFNpemUsIGZhbHNlKTtcbiAgfVxuICBmdW5jdGlvbiBlbmRQb2ludHMoKSB7XG4gICAgY29uc3QgZ2FwID0gdmlld1NpemUgLSBzY3JvbGxTbmFwc1swXSAtIDE7XG4gICAgY29uc3QgaW5kZXhlcyA9IHNsaWRlc0luR2FwKGFzY0l0ZW1zLCBnYXApO1xuICAgIHJldHVybiBmaW5kTG9vcFBvaW50cyhpbmRleGVzLCAtY29udGVudFNpemUsIHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIGNhbkxvb3AoKSB7XG4gICAgcmV0dXJuIGxvb3BQb2ludHMuZXZlcnkoKHtcbiAgICAgIGluZGV4XG4gICAgfSkgPT4ge1xuICAgICAgY29uc3Qgb3RoZXJJbmRleGVzID0gYXNjSXRlbXMuZmlsdGVyKGkgPT4gaSAhPT0gaW5kZXgpO1xuICAgICAgcmV0dXJuIHJlbW92ZVNsaWRlU2l6ZXMob3RoZXJJbmRleGVzLCB2aWV3U2l6ZSkgPD0gMC4xO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgbG9vcFBvaW50cy5mb3JFYWNoKGxvb3BQb2ludCA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgdHJhbnNsYXRlLFxuICAgICAgICBzbGlkZUxvY2F0aW9uXG4gICAgICB9ID0gbG9vcFBvaW50O1xuICAgICAgY29uc3Qgc2hpZnRMb2NhdGlvbiA9IHRhcmdldCgpO1xuICAgICAgaWYgKHNoaWZ0TG9jYXRpb24gPT09IHNsaWRlTG9jYXRpb24uZ2V0KCkpIHJldHVybjtcbiAgICAgIHRyYW5zbGF0ZS50byhzaGlmdExvY2F0aW9uKTtcbiAgICAgIHNsaWRlTG9jYXRpb24uc2V0KHNoaWZ0TG9jYXRpb24pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGxvb3BQb2ludHMuZm9yRWFjaChsb29wUG9pbnQgPT4gbG9vcFBvaW50LnRyYW5zbGF0ZS5jbGVhcigpKTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIGNhbkxvb3AsXG4gICAgY2xlYXIsXG4gICAgbG9vcCxcbiAgICBsb29wUG9pbnRzXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTbGlkZXNIYW5kbGVyKGNvbnRhaW5lciwgZXZlbnRIYW5kbGVyLCB3YXRjaFNsaWRlcykge1xuICBsZXQgbXV0YXRpb25PYnNlcnZlcjtcbiAgbGV0IGRlc3Ryb3llZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpbml0KGVtYmxhQXBpKSB7XG4gICAgaWYgKCF3YXRjaFNsaWRlcykgcmV0dXJuO1xuICAgIGZ1bmN0aW9uIGRlZmF1bHRDYWxsYmFjayhtdXRhdGlvbnMpIHtcbiAgICAgIGZvciAoY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7XG4gICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgIGVtYmxhQXBpLnJlSW5pdCgpO1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5lbWl0KCdzbGlkZXNDaGFuZ2VkJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG11dGF0aW9ucyA9PiB7XG4gICAgICBpZiAoZGVzdHJveWVkKSByZXR1cm47XG4gICAgICBpZiAoaXNCb29sZWFuKHdhdGNoU2xpZGVzKSB8fCB3YXRjaFNsaWRlcyhlbWJsYUFwaSwgbXV0YXRpb25zKSkge1xuICAgICAgICBkZWZhdWx0Q2FsbGJhY2sobXV0YXRpb25zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtdXRhdGlvbk9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyLCB7XG4gICAgICBjaGlsZExpc3Q6IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmIChtdXRhdGlvbk9ic2VydmVyKSBtdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTbGlkZXNJblZpZXcoY29udGFpbmVyLCBzbGlkZXMsIGV2ZW50SGFuZGxlciwgdGhyZXNob2xkKSB7XG4gIGNvbnN0IGludGVyc2VjdGlvbkVudHJ5TWFwID0ge307XG4gIGxldCBpblZpZXdDYWNoZSA9IG51bGw7XG4gIGxldCBub3RJblZpZXdDYWNoZSA9IG51bGw7XG4gIGxldCBpbnRlcnNlY3Rpb25PYnNlcnZlcjtcbiAgbGV0IGRlc3Ryb3llZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGludGVyc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgaWYgKGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzbGlkZXMuaW5kZXhPZihlbnRyeS50YXJnZXQpO1xuICAgICAgICBpbnRlcnNlY3Rpb25FbnRyeU1hcFtpbmRleF0gPSBlbnRyeTtcbiAgICAgIH0pO1xuICAgICAgaW5WaWV3Q2FjaGUgPSBudWxsO1xuICAgICAgbm90SW5WaWV3Q2FjaGUgPSBudWxsO1xuICAgICAgZXZlbnRIYW5kbGVyLmVtaXQoJ3NsaWRlc0luVmlldycpO1xuICAgIH0sIHtcbiAgICAgIHJvb3Q6IGNvbnRhaW5lci5wYXJlbnRFbGVtZW50LFxuICAgICAgdGhyZXNob2xkXG4gICAgfSk7XG4gICAgc2xpZGVzLmZvckVhY2goc2xpZGUgPT4gaW50ZXJzZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShzbGlkZSkpO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKGludGVyc2VjdGlvbk9ic2VydmVyKSBpbnRlcnNlY3Rpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVJblZpZXdMaXN0KGluVmlldykge1xuICAgIHJldHVybiBvYmplY3RLZXlzKGludGVyc2VjdGlvbkVudHJ5TWFwKS5yZWR1Y2UoKGxpc3QsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoc2xpZGVJbmRleCk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlzSW50ZXJzZWN0aW5nXG4gICAgICB9ID0gaW50ZXJzZWN0aW9uRW50cnlNYXBbaW5kZXhdO1xuICAgICAgY29uc3QgaW5WaWV3TWF0Y2ggPSBpblZpZXcgJiYgaXNJbnRlcnNlY3Rpbmc7XG4gICAgICBjb25zdCBub3RJblZpZXdNYXRjaCA9ICFpblZpZXcgJiYgIWlzSW50ZXJzZWN0aW5nO1xuICAgICAgaWYgKGluVmlld01hdGNoIHx8IG5vdEluVmlld01hdGNoKSBsaXN0LnB1c2goaW5kZXgpO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfSwgW10pO1xuICB9XG4gIGZ1bmN0aW9uIGdldChpblZpZXcgPSB0cnVlKSB7XG4gICAgaWYgKGluVmlldyAmJiBpblZpZXdDYWNoZSkgcmV0dXJuIGluVmlld0NhY2hlO1xuICAgIGlmICghaW5WaWV3ICYmIG5vdEluVmlld0NhY2hlKSByZXR1cm4gbm90SW5WaWV3Q2FjaGU7XG4gICAgY29uc3Qgc2xpZGVJbmRleGVzID0gY3JlYXRlSW5WaWV3TGlzdChpblZpZXcpO1xuICAgIGlmIChpblZpZXcpIGluVmlld0NhY2hlID0gc2xpZGVJbmRleGVzO1xuICAgIGlmICghaW5WaWV3KSBub3RJblZpZXdDYWNoZSA9IHNsaWRlSW5kZXhlcztcbiAgICByZXR1cm4gc2xpZGVJbmRleGVzO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgaW5pdCxcbiAgICBkZXN0cm95LFxuICAgIGdldFxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gU2xpZGVTaXplcyhheGlzLCBjb250YWluZXJSZWN0LCBzbGlkZVJlY3RzLCBzbGlkZXMsIHJlYWRFZGdlR2FwLCBvd25lcldpbmRvdykge1xuICBjb25zdCB7XG4gICAgbWVhc3VyZVNpemUsXG4gICAgc3RhcnRFZGdlLFxuICAgIGVuZEVkZ2VcbiAgfSA9IGF4aXM7XG4gIGNvbnN0IHdpdGhFZGdlR2FwID0gc2xpZGVSZWN0c1swXSAmJiByZWFkRWRnZUdhcDtcbiAgY29uc3Qgc3RhcnRHYXAgPSBtZWFzdXJlU3RhcnRHYXAoKTtcbiAgY29uc3QgZW5kR2FwID0gbWVhc3VyZUVuZEdhcCgpO1xuICBjb25zdCBzbGlkZVNpemVzID0gc2xpZGVSZWN0cy5tYXAobWVhc3VyZVNpemUpO1xuICBjb25zdCBzbGlkZVNpemVzV2l0aEdhcHMgPSBtZWFzdXJlV2l0aEdhcHMoKTtcbiAgZnVuY3Rpb24gbWVhc3VyZVN0YXJ0R2FwKCkge1xuICAgIGlmICghd2l0aEVkZ2VHYXApIHJldHVybiAwO1xuICAgIGNvbnN0IHNsaWRlUmVjdCA9IHNsaWRlUmVjdHNbMF07XG4gICAgcmV0dXJuIG1hdGhBYnMoY29udGFpbmVyUmVjdFtzdGFydEVkZ2VdIC0gc2xpZGVSZWN0W3N0YXJ0RWRnZV0pO1xuICB9XG4gIGZ1bmN0aW9uIG1lYXN1cmVFbmRHYXAoKSB7XG4gICAgaWYgKCF3aXRoRWRnZUdhcCkgcmV0dXJuIDA7XG4gICAgY29uc3Qgc3R5bGUgPSBvd25lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGFycmF5TGFzdChzbGlkZXMpKTtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGBtYXJnaW4tJHtlbmRFZGdlfWApKTtcbiAgfVxuICBmdW5jdGlvbiBtZWFzdXJlV2l0aEdhcHMoKSB7XG4gICAgcmV0dXJuIHNsaWRlUmVjdHMubWFwKChyZWN0LCBpbmRleCwgcmVjdHMpID0+IHtcbiAgICAgIGNvbnN0IGlzRmlyc3QgPSAhaW5kZXg7XG4gICAgICBjb25zdCBpc0xhc3QgPSBhcnJheUlzTGFzdEluZGV4KHJlY3RzLCBpbmRleCk7XG4gICAgICBpZiAoaXNGaXJzdCkgcmV0dXJuIHNsaWRlU2l6ZXNbaW5kZXhdICsgc3RhcnRHYXA7XG4gICAgICBpZiAoaXNMYXN0KSByZXR1cm4gc2xpZGVTaXplc1tpbmRleF0gKyBlbmRHYXA7XG4gICAgICByZXR1cm4gcmVjdHNbaW5kZXggKyAxXVtzdGFydEVkZ2VdIC0gcmVjdFtzdGFydEVkZ2VdO1xuICAgIH0pLm1hcChtYXRoQWJzKTtcbiAgfVxuICBjb25zdCBzZWxmID0ge1xuICAgIHNsaWRlU2l6ZXMsXG4gICAgc2xpZGVTaXplc1dpdGhHYXBzLFxuICAgIHN0YXJ0R2FwLFxuICAgIGVuZEdhcFxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gU2xpZGVzVG9TY3JvbGwoYXhpcywgZGlyZWN0aW9uLCB2aWV3U2l6ZSwgc2xpZGVzVG9TY3JvbGwsIGxvb3AsIGNvbnRhaW5lclJlY3QsIHNsaWRlUmVjdHMsIHN0YXJ0R2FwLCBlbmRHYXAsIHBpeGVsVG9sZXJhbmNlKSB7XG4gIGNvbnN0IHtcbiAgICBzdGFydEVkZ2UsXG4gICAgZW5kRWRnZVxuICB9ID0gYXhpcztcbiAgY29uc3QgZ3JvdXBCeU51bWJlciA9IGlzTnVtYmVyKHNsaWRlc1RvU2Nyb2xsKTtcbiAgZnVuY3Rpb24gYnlOdW1iZXIoYXJyYXksIGdyb3VwU2l6ZSkge1xuICAgIHJldHVybiBhcnJheUtleXMoYXJyYXkpLmZpbHRlcihpID0+IGkgJSBncm91cFNpemUgPT09IDApLm1hcChpID0+IGFycmF5LnNsaWNlKGksIGkgKyBncm91cFNpemUpKTtcbiAgfVxuICBmdW5jdGlvbiBieVNpemUoYXJyYXkpIHtcbiAgICBpZiAoIWFycmF5Lmxlbmd0aCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnJheUtleXMoYXJyYXkpLnJlZHVjZSgoZ3JvdXBzLCByZWN0QikgPT4ge1xuICAgICAgY29uc3QgcmVjdEEgPSBhcnJheUxhc3QoZ3JvdXBzKSB8fCAwO1xuICAgICAgY29uc3QgaXNGaXJzdCA9IHJlY3RBID09PSAwO1xuICAgICAgY29uc3QgaXNMYXN0ID0gcmVjdEIgPT09IGFycmF5TGFzdEluZGV4KGFycmF5KTtcbiAgICAgIGNvbnN0IGVkZ2VBID0gY29udGFpbmVyUmVjdFtzdGFydEVkZ2VdIC0gc2xpZGVSZWN0c1tyZWN0QV1bc3RhcnRFZGdlXTtcbiAgICAgIGNvbnN0IGVkZ2VCID0gY29udGFpbmVyUmVjdFtzdGFydEVkZ2VdIC0gc2xpZGVSZWN0c1tyZWN0Ql1bZW5kRWRnZV07XG4gICAgICBjb25zdCBnYXBBID0gIWxvb3AgJiYgaXNGaXJzdCA/IGRpcmVjdGlvbi5hcHBseShzdGFydEdhcCkgOiAwO1xuICAgICAgY29uc3QgZ2FwQiA9ICFsb29wICYmIGlzTGFzdCA/IGRpcmVjdGlvbi5hcHBseShlbmRHYXApIDogMDtcbiAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IG1hdGhBYnMoZWRnZUIgLSBnYXBCIC0gKGVkZ2VBICsgZ2FwQSkpO1xuICAgICAgaWYgKGNodW5rU2l6ZSA+IHZpZXdTaXplICsgcGl4ZWxUb2xlcmFuY2UpIGdyb3Vwcy5wdXNoKHJlY3RCKTtcbiAgICAgIGlmIChpc0xhc3QpIGdyb3Vwcy5wdXNoKGFycmF5Lmxlbmd0aCk7XG4gICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH0sIFtdKS5tYXAoKGN1cnJlbnRTaXplLCBpbmRleCwgZ3JvdXBzKSA9PiB7XG4gICAgICBjb25zdCBwcmV2aW91c1NpemUgPSBNYXRoLm1heChncm91cHNbaW5kZXggLSAxXSB8fCAwKTtcbiAgICAgIHJldHVybiBhcnJheS5zbGljZShwcmV2aW91c1NpemUsIGN1cnJlbnRTaXplKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBncm91cFNsaWRlcyhhcnJheSkge1xuICAgIHJldHVybiBncm91cEJ5TnVtYmVyID8gYnlOdW1iZXIoYXJyYXksIHNsaWRlc1RvU2Nyb2xsKSA6IGJ5U2l6ZShhcnJheSk7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBncm91cFNsaWRlc1xuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gRW5naW5lKHJvb3QsIGNvbnRhaW5lciwgc2xpZGVzLCBvd25lckRvY3VtZW50LCBvd25lcldpbmRvdywgb3B0aW9ucywgZXZlbnRIYW5kbGVyKSB7XG4gIC8vIE9wdGlvbnNcbiAgY29uc3Qge1xuICAgIGFsaWduLFxuICAgIGF4aXM6IHNjcm9sbEF4aXMsXG4gICAgZGlyZWN0aW9uOiBjb250ZW50RGlyZWN0aW9uLFxuICAgIHN0YXJ0SW5kZXgsXG4gICAgbG9vcCxcbiAgICBkdXJhdGlvbixcbiAgICBkcmFnRnJlZSxcbiAgICBkcmFnVGhyZXNob2xkLFxuICAgIGluVmlld1RocmVzaG9sZCxcbiAgICBzbGlkZXNUb1Njcm9sbDogZ3JvdXBTbGlkZXMsXG4gICAgc2tpcFNuYXBzLFxuICAgIGNvbnRhaW5TY3JvbGwsXG4gICAgd2F0Y2hSZXNpemUsXG4gICAgd2F0Y2hTbGlkZXMsXG4gICAgd2F0Y2hEcmFnXG4gIH0gPSBvcHRpb25zO1xuICAvLyBNZWFzdXJlbWVudHNcbiAgY29uc3QgcGl4ZWxUb2xlcmFuY2UgPSAyO1xuICBjb25zdCBub2RlUmVjdHMgPSBOb2RlUmVjdHMoKTtcbiAgY29uc3QgY29udGFpbmVyUmVjdCA9IG5vZGVSZWN0cy5tZWFzdXJlKGNvbnRhaW5lcik7XG4gIGNvbnN0IHNsaWRlUmVjdHMgPSBzbGlkZXMubWFwKG5vZGVSZWN0cy5tZWFzdXJlKTtcbiAgY29uc3QgZGlyZWN0aW9uID0gRGlyZWN0aW9uKGNvbnRlbnREaXJlY3Rpb24pO1xuICBjb25zdCBheGlzID0gQXhpcyhzY3JvbGxBeGlzLCBjb250ZW50RGlyZWN0aW9uKTtcbiAgY29uc3Qgdmlld1NpemUgPSBheGlzLm1lYXN1cmVTaXplKGNvbnRhaW5lclJlY3QpO1xuICBjb25zdCBwZXJjZW50T2ZWaWV3ID0gUGVyY2VudE9mVmlldyh2aWV3U2l6ZSk7XG4gIGNvbnN0IGFsaWdubWVudCA9IEFsaWdubWVudChhbGlnbiwgdmlld1NpemUpO1xuICBjb25zdCBjb250YWluU25hcHMgPSAhbG9vcCAmJiAhIWNvbnRhaW5TY3JvbGw7XG4gIGNvbnN0IHJlYWRFZGdlR2FwID0gbG9vcCB8fCAhIWNvbnRhaW5TY3JvbGw7XG4gIGNvbnN0IHtcbiAgICBzbGlkZVNpemVzLFxuICAgIHNsaWRlU2l6ZXNXaXRoR2FwcyxcbiAgICBzdGFydEdhcCxcbiAgICBlbmRHYXBcbiAgfSA9IFNsaWRlU2l6ZXMoYXhpcywgY29udGFpbmVyUmVjdCwgc2xpZGVSZWN0cywgc2xpZGVzLCByZWFkRWRnZUdhcCwgb3duZXJXaW5kb3cpO1xuICBjb25zdCBzbGlkZXNUb1Njcm9sbCA9IFNsaWRlc1RvU2Nyb2xsKGF4aXMsIGRpcmVjdGlvbiwgdmlld1NpemUsIGdyb3VwU2xpZGVzLCBsb29wLCBjb250YWluZXJSZWN0LCBzbGlkZVJlY3RzLCBzdGFydEdhcCwgZW5kR2FwLCBwaXhlbFRvbGVyYW5jZSk7XG4gIGNvbnN0IHtcbiAgICBzbmFwcyxcbiAgICBzbmFwc0FsaWduZWRcbiAgfSA9IFNjcm9sbFNuYXBzKGF4aXMsIGFsaWdubWVudCwgY29udGFpbmVyUmVjdCwgc2xpZGVSZWN0cywgc2xpZGVzVG9TY3JvbGwpO1xuICBjb25zdCBjb250ZW50U2l6ZSA9IC1hcnJheUxhc3Qoc25hcHMpICsgYXJyYXlMYXN0KHNsaWRlU2l6ZXNXaXRoR2Fwcyk7XG4gIGNvbnN0IHtcbiAgICBzbmFwc0NvbnRhaW5lZCxcbiAgICBzY3JvbGxDb250YWluTGltaXRcbiAgfSA9IFNjcm9sbENvbnRhaW4odmlld1NpemUsIGNvbnRlbnRTaXplLCBzbmFwc0FsaWduZWQsIGNvbnRhaW5TY3JvbGwsIHBpeGVsVG9sZXJhbmNlKTtcbiAgY29uc3Qgc2Nyb2xsU25hcHMgPSBjb250YWluU25hcHMgPyBzbmFwc0NvbnRhaW5lZCA6IHNuYXBzQWxpZ25lZDtcbiAgY29uc3Qge1xuICAgIGxpbWl0XG4gIH0gPSBTY3JvbGxMaW1pdChjb250ZW50U2l6ZSwgc2Nyb2xsU25hcHMsIGxvb3ApO1xuICAvLyBJbmRleGVzXG4gIGNvbnN0IGluZGV4ID0gQ291bnRlcihhcnJheUxhc3RJbmRleChzY3JvbGxTbmFwcyksIHN0YXJ0SW5kZXgsIGxvb3ApO1xuICBjb25zdCBpbmRleFByZXZpb3VzID0gaW5kZXguY2xvbmUoKTtcbiAgY29uc3Qgc2xpZGVJbmRleGVzID0gYXJyYXlLZXlzKHNsaWRlcyk7XG4gIC8vIEFuaW1hdGlvblxuICBjb25zdCB1cGRhdGUgPSAoe1xuICAgIGRyYWdIYW5kbGVyLFxuICAgIHNjcm9sbEJvZHksXG4gICAgc2Nyb2xsQm91bmRzLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGxvb3BcbiAgICB9XG4gIH0pID0+IHtcbiAgICBpZiAoIWxvb3ApIHNjcm9sbEJvdW5kcy5jb25zdHJhaW4oZHJhZ0hhbmRsZXIucG9pbnRlckRvd24oKSk7XG4gICAgc2Nyb2xsQm9keS5zZWVrKCk7XG4gIH07XG4gIGNvbnN0IHJlbmRlciA9ICh7XG4gICAgc2Nyb2xsQm9keSxcbiAgICB0cmFuc2xhdGUsXG4gICAgbG9jYXRpb24sXG4gICAgb2Zmc2V0TG9jYXRpb24sXG4gICAgc2Nyb2xsTG9vcGVyLFxuICAgIHNsaWRlTG9vcGVyLFxuICAgIGRyYWdIYW5kbGVyLFxuICAgIGFuaW1hdGlvbixcbiAgICBldmVudEhhbmRsZXIsXG4gICAgb3B0aW9uczoge1xuICAgICAgbG9vcFxuICAgIH1cbiAgfSwgbGFnT2Zmc2V0KSA9PiB7XG4gICAgY29uc3QgdmVsb2NpdHkgPSBzY3JvbGxCb2R5LnZlbG9jaXR5KCk7XG4gICAgY29uc3QgaGFzU2V0dGxlZCA9IHNjcm9sbEJvZHkuc2V0dGxlZCgpO1xuICAgIGlmIChoYXNTZXR0bGVkICYmICFkcmFnSGFuZGxlci5wb2ludGVyRG93bigpKSB7XG4gICAgICBhbmltYXRpb24uc3RvcCgpO1xuICAgICAgZXZlbnRIYW5kbGVyLmVtaXQoJ3NldHRsZScpO1xuICAgIH1cbiAgICBpZiAoIWhhc1NldHRsZWQpIGV2ZW50SGFuZGxlci5lbWl0KCdzY3JvbGwnKTtcbiAgICBvZmZzZXRMb2NhdGlvbi5zZXQobG9jYXRpb24uZ2V0KCkgLSB2ZWxvY2l0eSArIHZlbG9jaXR5ICogbGFnT2Zmc2V0KTtcbiAgICBpZiAobG9vcCkge1xuICAgICAgc2Nyb2xsTG9vcGVyLmxvb3Aoc2Nyb2xsQm9keS5kaXJlY3Rpb24oKSk7XG4gICAgICBzbGlkZUxvb3Blci5sb29wKCk7XG4gICAgfVxuICAgIHRyYW5zbGF0ZS50byhvZmZzZXRMb2NhdGlvbi5nZXQoKSk7XG4gIH07XG4gIGNvbnN0IGFuaW1hdGlvbiA9IEFuaW1hdGlvbnMob3duZXJEb2N1bWVudCwgb3duZXJXaW5kb3csICgpID0+IHVwZGF0ZShlbmdpbmUpLCBsYWdPZmZzZXQgPT4gcmVuZGVyKGVuZ2luZSwgbGFnT2Zmc2V0KSk7XG4gIC8vIFNoYXJlZFxuICBjb25zdCBmcmljdGlvbiA9IDAuNjg7XG4gIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSBzY3JvbGxTbmFwc1tpbmRleC5nZXQoKV07XG4gIGNvbnN0IGxvY2F0aW9uID0gVmVjdG9yMUQoc3RhcnRMb2NhdGlvbik7XG4gIGNvbnN0IG9mZnNldExvY2F0aW9uID0gVmVjdG9yMUQoc3RhcnRMb2NhdGlvbik7XG4gIGNvbnN0IHRhcmdldCA9IFZlY3RvcjFEKHN0YXJ0TG9jYXRpb24pO1xuICBjb25zdCBzY3JvbGxCb2R5ID0gU2Nyb2xsQm9keShsb2NhdGlvbiwgb2Zmc2V0TG9jYXRpb24sIHRhcmdldCwgZHVyYXRpb24sIGZyaWN0aW9uKTtcbiAgY29uc3Qgc2Nyb2xsVGFyZ2V0ID0gU2Nyb2xsVGFyZ2V0KGxvb3AsIHNjcm9sbFNuYXBzLCBjb250ZW50U2l6ZSwgbGltaXQsIHRhcmdldCk7XG4gIGNvbnN0IHNjcm9sbFRvID0gU2Nyb2xsVG8oYW5pbWF0aW9uLCBpbmRleCwgaW5kZXhQcmV2aW91cywgc2Nyb2xsQm9keSwgc2Nyb2xsVGFyZ2V0LCB0YXJnZXQsIGV2ZW50SGFuZGxlcik7XG4gIGNvbnN0IHNjcm9sbFByb2dyZXNzID0gU2Nyb2xsUHJvZ3Jlc3MobGltaXQpO1xuICBjb25zdCBldmVudFN0b3JlID0gRXZlbnRTdG9yZSgpO1xuICBjb25zdCBzbGlkZXNJblZpZXcgPSBTbGlkZXNJblZpZXcoY29udGFpbmVyLCBzbGlkZXMsIGV2ZW50SGFuZGxlciwgaW5WaWV3VGhyZXNob2xkKTtcbiAgY29uc3Qge1xuICAgIHNsaWRlUmVnaXN0cnlcbiAgfSA9IFNsaWRlUmVnaXN0cnkoY29udGFpblNuYXBzLCBjb250YWluU2Nyb2xsLCBzY3JvbGxTbmFwcywgc2Nyb2xsQ29udGFpbkxpbWl0LCBzbGlkZXNUb1Njcm9sbCwgc2xpZGVJbmRleGVzKTtcbiAgY29uc3Qgc2xpZGVGb2N1cyA9IFNsaWRlRm9jdXMocm9vdCwgc2xpZGVzLCBzbGlkZVJlZ2lzdHJ5LCBzY3JvbGxUbywgc2Nyb2xsQm9keSwgZXZlbnRTdG9yZSk7XG4gIC8vIEVuZ2luZVxuICBjb25zdCBlbmdpbmUgPSB7XG4gICAgb3duZXJEb2N1bWVudCxcbiAgICBvd25lcldpbmRvdyxcbiAgICBldmVudEhhbmRsZXIsXG4gICAgY29udGFpbmVyUmVjdCxcbiAgICBzbGlkZVJlY3RzLFxuICAgIGFuaW1hdGlvbixcbiAgICBheGlzLFxuICAgIGRpcmVjdGlvbixcbiAgICBkcmFnSGFuZGxlcjogRHJhZ0hhbmRsZXIoYXhpcywgZGlyZWN0aW9uLCByb290LCBvd25lckRvY3VtZW50LCBvd25lcldpbmRvdywgdGFyZ2V0LCBEcmFnVHJhY2tlcihheGlzLCBvd25lcldpbmRvdyksIGxvY2F0aW9uLCBhbmltYXRpb24sIHNjcm9sbFRvLCBzY3JvbGxCb2R5LCBzY3JvbGxUYXJnZXQsIGluZGV4LCBldmVudEhhbmRsZXIsIHBlcmNlbnRPZlZpZXcsIGRyYWdGcmVlLCBkcmFnVGhyZXNob2xkLCBza2lwU25hcHMsIGZyaWN0aW9uLCB3YXRjaERyYWcpLFxuICAgIGV2ZW50U3RvcmUsXG4gICAgcGVyY2VudE9mVmlldyxcbiAgICBpbmRleCxcbiAgICBpbmRleFByZXZpb3VzLFxuICAgIGxpbWl0LFxuICAgIGxvY2F0aW9uLFxuICAgIG9mZnNldExvY2F0aW9uLFxuICAgIG9wdGlvbnMsXG4gICAgcmVzaXplSGFuZGxlcjogUmVzaXplSGFuZGxlcihjb250YWluZXIsIGV2ZW50SGFuZGxlciwgb3duZXJXaW5kb3csIHNsaWRlcywgYXhpcywgd2F0Y2hSZXNpemUsIG5vZGVSZWN0cyksXG4gICAgc2Nyb2xsQm9keSxcbiAgICBzY3JvbGxCb3VuZHM6IFNjcm9sbEJvdW5kcyhsaW1pdCwgbG9jYXRpb24sIHRhcmdldCwgc2Nyb2xsQm9keSwgcGVyY2VudE9mVmlldyksXG4gICAgc2Nyb2xsTG9vcGVyOiBTY3JvbGxMb29wZXIoY29udGVudFNpemUsIGxpbWl0LCBvZmZzZXRMb2NhdGlvbiwgW2xvY2F0aW9uLCBvZmZzZXRMb2NhdGlvbiwgdGFyZ2V0XSksXG4gICAgc2Nyb2xsUHJvZ3Jlc3MsXG4gICAgc2Nyb2xsU25hcExpc3Q6IHNjcm9sbFNuYXBzLm1hcChzY3JvbGxQcm9ncmVzcy5nZXQpLFxuICAgIHNjcm9sbFNuYXBzLFxuICAgIHNjcm9sbFRhcmdldCxcbiAgICBzY3JvbGxUbyxcbiAgICBzbGlkZUxvb3BlcjogU2xpZGVMb29wZXIoYXhpcywgZGlyZWN0aW9uLCB2aWV3U2l6ZSwgY29udGVudFNpemUsIHNsaWRlU2l6ZXMsIHNsaWRlU2l6ZXNXaXRoR2Fwcywgc25hcHMsIHNjcm9sbFNuYXBzLCBvZmZzZXRMb2NhdGlvbiwgc2xpZGVzKSxcbiAgICBzbGlkZUZvY3VzLFxuICAgIHNsaWRlc0hhbmRsZXI6IFNsaWRlc0hhbmRsZXIoY29udGFpbmVyLCBldmVudEhhbmRsZXIsIHdhdGNoU2xpZGVzKSxcbiAgICBzbGlkZXNJblZpZXcsXG4gICAgc2xpZGVJbmRleGVzLFxuICAgIHNsaWRlUmVnaXN0cnksXG4gICAgc2xpZGVzVG9TY3JvbGwsXG4gICAgdGFyZ2V0LFxuICAgIHRyYW5zbGF0ZTogVHJhbnNsYXRlKGF4aXMsIGRpcmVjdGlvbiwgY29udGFpbmVyKVxuICB9O1xuICByZXR1cm4gZW5naW5lO1xufVxuXG5mdW5jdGlvbiBFdmVudEhhbmRsZXIoKSB7XG4gIGNvbnN0IGxpc3RlbmVycyA9IHt9O1xuICBsZXQgYXBpO1xuICBmdW5jdGlvbiBpbml0KGVtYmxhQXBpKSB7XG4gICAgYXBpID0gZW1ibGFBcGk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKGV2dCkge1xuICAgIHJldHVybiBsaXN0ZW5lcnNbZXZ0XSB8fCBbXTtcbiAgfVxuICBmdW5jdGlvbiBlbWl0KGV2dCkge1xuICAgIGdldExpc3RlbmVycyhldnQpLmZvckVhY2goZSA9PiBlKGFwaSwgZXZ0KSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgZnVuY3Rpb24gb24oZXZ0LCBjYikge1xuICAgIGxpc3RlbmVyc1tldnRdID0gZ2V0TGlzdGVuZXJzKGV2dCkuY29uY2F0KFtjYl0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG4gIGZ1bmN0aW9uIG9mZihldnQsIGNiKSB7XG4gICAgbGlzdGVuZXJzW2V2dF0gPSBnZXRMaXN0ZW5lcnMoZXZ0KS5maWx0ZXIoZSA9PiBlICE9PSBjYik7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBpbml0LFxuICAgIGVtaXQsXG4gICAgb2ZmLFxuICAgIG9uXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgYWxpZ246ICdjZW50ZXInLFxuICBheGlzOiAneCcsXG4gIGNvbnRhaW5lcjogbnVsbCxcbiAgc2xpZGVzOiBudWxsLFxuICBjb250YWluU2Nyb2xsOiAndHJpbVNuYXBzJyxcbiAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gIGluVmlld1RocmVzaG9sZDogMCxcbiAgYnJlYWtwb2ludHM6IHt9LFxuICBkcmFnRnJlZTogZmFsc2UsXG4gIGRyYWdUaHJlc2hvbGQ6IDEwLFxuICBsb29wOiBmYWxzZSxcbiAgc2tpcFNuYXBzOiBmYWxzZSxcbiAgZHVyYXRpb246IDI1LFxuICBzdGFydEluZGV4OiAwLFxuICBhY3RpdmU6IHRydWUsXG4gIHdhdGNoRHJhZzogdHJ1ZSxcbiAgd2F0Y2hSZXNpemU6IHRydWUsXG4gIHdhdGNoU2xpZGVzOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBPcHRpb25zSGFuZGxlcihvd25lcldpbmRvdykge1xuICBmdW5jdGlvbiBtZXJnZU9wdGlvbnMob3B0aW9uc0EsIG9wdGlvbnNCKSB7XG4gICAgcmV0dXJuIG9iamVjdHNNZXJnZURlZXAob3B0aW9uc0EsIG9wdGlvbnNCIHx8IHt9KTtcbiAgfVxuICBmdW5jdGlvbiBvcHRpb25zQXRNZWRpYShvcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0aW9uc0F0TWVkaWEgPSBvcHRpb25zLmJyZWFrcG9pbnRzIHx8IHt9O1xuICAgIGNvbnN0IG1hdGNoZWRNZWRpYU9wdGlvbnMgPSBvYmplY3RLZXlzKG9wdGlvbnNBdE1lZGlhKS5maWx0ZXIobWVkaWEgPT4gb3duZXJXaW5kb3cubWF0Y2hNZWRpYShtZWRpYSkubWF0Y2hlcykubWFwKG1lZGlhID0+IG9wdGlvbnNBdE1lZGlhW21lZGlhXSkucmVkdWNlKChhLCBtZWRpYU9wdGlvbikgPT4gbWVyZ2VPcHRpb25zKGEsIG1lZGlhT3B0aW9uKSwge30pO1xuICAgIHJldHVybiBtZXJnZU9wdGlvbnMob3B0aW9ucywgbWF0Y2hlZE1lZGlhT3B0aW9ucyk7XG4gIH1cbiAgZnVuY3Rpb24gb3B0aW9uc01lZGlhUXVlcmllcyhvcHRpb25zTGlzdCkge1xuICAgIHJldHVybiBvcHRpb25zTGlzdC5tYXAob3B0aW9ucyA9PiBvYmplY3RLZXlzKG9wdGlvbnMuYnJlYWtwb2ludHMgfHwge30pKS5yZWR1Y2UoKGFjYywgbWVkaWFRdWVyaWVzKSA9PiBhY2MuY29uY2F0KG1lZGlhUXVlcmllcyksIFtdKS5tYXAob3duZXJXaW5kb3cubWF0Y2hNZWRpYSk7XG4gIH1cbiAgY29uc3Qgc2VsZiA9IHtcbiAgICBtZXJnZU9wdGlvbnMsXG4gICAgb3B0aW9uc0F0TWVkaWEsXG4gICAgb3B0aW9uc01lZGlhUXVlcmllc1xuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gUGx1Z2luc0hhbmRsZXIob3B0aW9uc0hhbmRsZXIpIHtcbiAgbGV0IGFjdGl2ZVBsdWdpbnMgPSBbXTtcbiAgZnVuY3Rpb24gaW5pdChlbWJsYUFwaSwgcGx1Z2lucykge1xuICAgIGFjdGl2ZVBsdWdpbnMgPSBwbHVnaW5zLmZpbHRlcigoe1xuICAgICAgb3B0aW9uc1xuICAgIH0pID0+IG9wdGlvbnNIYW5kbGVyLm9wdGlvbnNBdE1lZGlhKG9wdGlvbnMpLmFjdGl2ZSAhPT0gZmFsc2UpO1xuICAgIGFjdGl2ZVBsdWdpbnMuZm9yRWFjaChwbHVnaW4gPT4gcGx1Z2luLmluaXQoZW1ibGFBcGksIG9wdGlvbnNIYW5kbGVyKSk7XG4gICAgcmV0dXJuIHBsdWdpbnMucmVkdWNlKChtYXAsIHBsdWdpbikgPT4gT2JqZWN0LmFzc2lnbihtYXAsIHtcbiAgICAgIFtwbHVnaW4ubmFtZV06IHBsdWdpblxuICAgIH0pLCB7fSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBhY3RpdmVQbHVnaW5zID0gYWN0aXZlUGx1Z2lucy5maWx0ZXIocGx1Z2luID0+IHBsdWdpbi5kZXN0cm95KCkpO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBFbWJsYUNhcm91c2VsKHJvb3QsIHVzZXJPcHRpb25zLCB1c2VyUGx1Z2lucykge1xuICBjb25zdCBvd25lckRvY3VtZW50ID0gcm9vdC5vd25lckRvY3VtZW50O1xuICBjb25zdCBvd25lcldpbmRvdyA9IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNvbnN0IG9wdGlvbnNIYW5kbGVyID0gT3B0aW9uc0hhbmRsZXIob3duZXJXaW5kb3cpO1xuICBjb25zdCBwbHVnaW5zSGFuZGxlciA9IFBsdWdpbnNIYW5kbGVyKG9wdGlvbnNIYW5kbGVyKTtcbiAgY29uc3QgbWVkaWFIYW5kbGVycyA9IEV2ZW50U3RvcmUoKTtcbiAgY29uc3QgZXZlbnRIYW5kbGVyID0gRXZlbnRIYW5kbGVyKCk7XG4gIGNvbnN0IHtcbiAgICBtZXJnZU9wdGlvbnMsXG4gICAgb3B0aW9uc0F0TWVkaWEsXG4gICAgb3B0aW9uc01lZGlhUXVlcmllc1xuICB9ID0gb3B0aW9uc0hhbmRsZXI7XG4gIGNvbnN0IHtcbiAgICBvbixcbiAgICBvZmYsXG4gICAgZW1pdFxuICB9ID0gZXZlbnRIYW5kbGVyO1xuICBjb25zdCByZUluaXQgPSByZUFjdGl2YXRlO1xuICBsZXQgZGVzdHJveWVkID0gZmFsc2U7XG4gIGxldCBlbmdpbmU7XG4gIGxldCBvcHRpb25zQmFzZSA9IG1lcmdlT3B0aW9ucyhkZWZhdWx0T3B0aW9ucywgRW1ibGFDYXJvdXNlbC5nbG9iYWxPcHRpb25zKTtcbiAgbGV0IG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMob3B0aW9uc0Jhc2UpO1xuICBsZXQgcGx1Z2luTGlzdCA9IFtdO1xuICBsZXQgcGx1Z2luQXBpcztcbiAgbGV0IGNvbnRhaW5lcjtcbiAgbGV0IHNsaWRlcztcbiAgZnVuY3Rpb24gc3RvcmVFbGVtZW50cygpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb250YWluZXI6IHVzZXJDb250YWluZXIsXG4gICAgICBzbGlkZXM6IHVzZXJTbGlkZXNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjdXN0b21Db250YWluZXIgPSBpc1N0cmluZyh1c2VyQ29udGFpbmVyKSA/IHJvb3QucXVlcnlTZWxlY3Rvcih1c2VyQ29udGFpbmVyKSA6IHVzZXJDb250YWluZXI7XG4gICAgY29udGFpbmVyID0gY3VzdG9tQ29udGFpbmVyIHx8IHJvb3QuY2hpbGRyZW5bMF07XG4gICAgY29uc3QgY3VzdG9tU2xpZGVzID0gaXNTdHJpbmcodXNlclNsaWRlcykgPyBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCh1c2VyU2xpZGVzKSA6IHVzZXJTbGlkZXM7XG4gICAgc2xpZGVzID0gW10uc2xpY2UuY2FsbChjdXN0b21TbGlkZXMgfHwgY29udGFpbmVyLmNoaWxkcmVuKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVFbmdpbmUob3B0aW9ucykge1xuICAgIGNvbnN0IGVuZ2luZSA9IEVuZ2luZShyb290LCBjb250YWluZXIsIHNsaWRlcywgb3duZXJEb2N1bWVudCwgb3duZXJXaW5kb3csIG9wdGlvbnMsIGV2ZW50SGFuZGxlcik7XG4gICAgaWYgKG9wdGlvbnMubG9vcCAmJiAhZW5naW5lLnNsaWRlTG9vcGVyLmNhbkxvb3AoKSkge1xuICAgICAgY29uc3Qgb3B0aW9uc1dpdGhvdXRMb29wID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICBsb29wOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY3JlYXRlRW5naW5lKG9wdGlvbnNXaXRob3V0TG9vcCk7XG4gICAgfVxuICAgIHJldHVybiBlbmdpbmU7XG4gIH1cbiAgZnVuY3Rpb24gYWN0aXZhdGUod2l0aE9wdGlvbnMsIHdpdGhQbHVnaW5zKSB7XG4gICAgaWYgKGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIG9wdGlvbnNCYXNlID0gbWVyZ2VPcHRpb25zKG9wdGlvbnNCYXNlLCB3aXRoT3B0aW9ucyk7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnNBdE1lZGlhKG9wdGlvbnNCYXNlKTtcbiAgICBwbHVnaW5MaXN0ID0gd2l0aFBsdWdpbnMgfHwgcGx1Z2luTGlzdDtcbiAgICBzdG9yZUVsZW1lbnRzKCk7XG4gICAgZW5naW5lID0gY3JlYXRlRW5naW5lKG9wdGlvbnMpO1xuICAgIG9wdGlvbnNNZWRpYVF1ZXJpZXMoW29wdGlvbnNCYXNlLCAuLi5wbHVnaW5MaXN0Lm1hcCgoe1xuICAgICAgb3B0aW9uc1xuICAgIH0pID0+IG9wdGlvbnMpXSkuZm9yRWFjaChxdWVyeSA9PiBtZWRpYUhhbmRsZXJzLmFkZChxdWVyeSwgJ2NoYW5nZScsIHJlQWN0aXZhdGUpKTtcbiAgICBpZiAoIW9wdGlvbnMuYWN0aXZlKSByZXR1cm47XG4gICAgZW5naW5lLnRyYW5zbGF0ZS50byhlbmdpbmUubG9jYXRpb24uZ2V0KCkpO1xuICAgIGVuZ2luZS5hbmltYXRpb24uaW5pdCgpO1xuICAgIGVuZ2luZS5zbGlkZXNJblZpZXcuaW5pdCgpO1xuICAgIGVuZ2luZS5zbGlkZUZvY3VzLmluaXQoKTtcbiAgICBlbmdpbmUuZXZlbnRIYW5kbGVyLmluaXQoc2VsZik7XG4gICAgZW5naW5lLnJlc2l6ZUhhbmRsZXIuaW5pdChzZWxmKTtcbiAgICBlbmdpbmUuc2xpZGVzSGFuZGxlci5pbml0KHNlbGYpO1xuICAgIGlmIChlbmdpbmUub3B0aW9ucy5sb29wKSBlbmdpbmUuc2xpZGVMb29wZXIubG9vcCgpO1xuICAgIGlmIChjb250YWluZXIub2Zmc2V0UGFyZW50ICYmIHNsaWRlcy5sZW5ndGgpIGVuZ2luZS5kcmFnSGFuZGxlci5pbml0KHNlbGYpO1xuICAgIHBsdWdpbkFwaXMgPSBwbHVnaW5zSGFuZGxlci5pbml0KHNlbGYsIHBsdWdpbkxpc3QpO1xuICB9XG4gIGZ1bmN0aW9uIHJlQWN0aXZhdGUod2l0aE9wdGlvbnMsIHdpdGhQbHVnaW5zKSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IHNlbGVjdGVkU2Nyb2xsU25hcCgpO1xuICAgIGRlQWN0aXZhdGUoKTtcbiAgICBhY3RpdmF0ZShtZXJnZU9wdGlvbnMoe1xuICAgICAgc3RhcnRJbmRleFxuICAgIH0sIHdpdGhPcHRpb25zKSwgd2l0aFBsdWdpbnMpO1xuICAgIGV2ZW50SGFuZGxlci5lbWl0KCdyZUluaXQnKTtcbiAgfVxuICBmdW5jdGlvbiBkZUFjdGl2YXRlKCkge1xuICAgIGVuZ2luZS5kcmFnSGFuZGxlci5kZXN0cm95KCk7XG4gICAgZW5naW5lLmV2ZW50U3RvcmUuY2xlYXIoKTtcbiAgICBlbmdpbmUudHJhbnNsYXRlLmNsZWFyKCk7XG4gICAgZW5naW5lLnNsaWRlTG9vcGVyLmNsZWFyKCk7XG4gICAgZW5naW5lLnJlc2l6ZUhhbmRsZXIuZGVzdHJveSgpO1xuICAgIGVuZ2luZS5zbGlkZXNIYW5kbGVyLmRlc3Ryb3koKTtcbiAgICBlbmdpbmUuc2xpZGVzSW5WaWV3LmRlc3Ryb3koKTtcbiAgICBlbmdpbmUuYW5pbWF0aW9uLmRlc3Ryb3koKTtcbiAgICBwbHVnaW5zSGFuZGxlci5kZXN0cm95KCk7XG4gICAgbWVkaWFIYW5kbGVycy5jbGVhcigpO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gICAgbWVkaWFIYW5kbGVycy5jbGVhcigpO1xuICAgIGRlQWN0aXZhdGUoKTtcbiAgICBldmVudEhhbmRsZXIuZW1pdCgnZGVzdHJveScpO1xuICB9XG4gIGZ1bmN0aW9uIHNjcm9sbFRvKGluZGV4LCBqdW1wLCBkaXJlY3Rpb24pIHtcbiAgICBpZiAoIW9wdGlvbnMuYWN0aXZlIHx8IGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGVuZ2luZS5zY3JvbGxCb2R5LnVzZUJhc2VGcmljdGlvbigpLnVzZUR1cmF0aW9uKGp1bXAgPT09IHRydWUgPyAwIDogb3B0aW9ucy5kdXJhdGlvbik7XG4gICAgZW5naW5lLnNjcm9sbFRvLmluZGV4KGluZGV4LCBkaXJlY3Rpb24gfHwgMCk7XG4gIH1cbiAgZnVuY3Rpb24gc2Nyb2xsTmV4dChqdW1wKSB7XG4gICAgY29uc3QgbmV4dCA9IGVuZ2luZS5pbmRleC5hZGQoMSkuZ2V0KCk7XG4gICAgc2Nyb2xsVG8obmV4dCwganVtcCwgLTEpO1xuICB9XG4gIGZ1bmN0aW9uIHNjcm9sbFByZXYoanVtcCkge1xuICAgIGNvbnN0IHByZXYgPSBlbmdpbmUuaW5kZXguYWRkKC0xKS5nZXQoKTtcbiAgICBzY3JvbGxUbyhwcmV2LCBqdW1wLCAxKTtcbiAgfVxuICBmdW5jdGlvbiBjYW5TY3JvbGxOZXh0KCkge1xuICAgIGNvbnN0IG5leHQgPSBlbmdpbmUuaW5kZXguYWRkKDEpLmdldCgpO1xuICAgIHJldHVybiBuZXh0ICE9PSBzZWxlY3RlZFNjcm9sbFNuYXAoKTtcbiAgfVxuICBmdW5jdGlvbiBjYW5TY3JvbGxQcmV2KCkge1xuICAgIGNvbnN0IHByZXYgPSBlbmdpbmUuaW5kZXguYWRkKC0xKS5nZXQoKTtcbiAgICByZXR1cm4gcHJldiAhPT0gc2VsZWN0ZWRTY3JvbGxTbmFwKCk7XG4gIH1cbiAgZnVuY3Rpb24gc2Nyb2xsU25hcExpc3QoKSB7XG4gICAgcmV0dXJuIGVuZ2luZS5zY3JvbGxTbmFwTGlzdDtcbiAgfVxuICBmdW5jdGlvbiBzY3JvbGxQcm9ncmVzcygpIHtcbiAgICByZXR1cm4gZW5naW5lLnNjcm9sbFByb2dyZXNzLmdldChlbmdpbmUubG9jYXRpb24uZ2V0KCkpO1xuICB9XG4gIGZ1bmN0aW9uIHNlbGVjdGVkU2Nyb2xsU25hcCgpIHtcbiAgICByZXR1cm4gZW5naW5lLmluZGV4LmdldCgpO1xuICB9XG4gIGZ1bmN0aW9uIHByZXZpb3VzU2Nyb2xsU25hcCgpIHtcbiAgICByZXR1cm4gZW5naW5lLmluZGV4UHJldmlvdXMuZ2V0KCk7XG4gIH1cbiAgZnVuY3Rpb24gc2xpZGVzSW5WaWV3KCkge1xuICAgIHJldHVybiBlbmdpbmUuc2xpZGVzSW5WaWV3LmdldCgpO1xuICB9XG4gIGZ1bmN0aW9uIHNsaWRlc05vdEluVmlldygpIHtcbiAgICByZXR1cm4gZW5naW5lLnNsaWRlc0luVmlldy5nZXQoZmFsc2UpO1xuICB9XG4gIGZ1bmN0aW9uIHBsdWdpbnMoKSB7XG4gICAgcmV0dXJuIHBsdWdpbkFwaXM7XG4gIH1cbiAgZnVuY3Rpb24gaW50ZXJuYWxFbmdpbmUoKSB7XG4gICAgcmV0dXJuIGVuZ2luZTtcbiAgfVxuICBmdW5jdGlvbiByb290Tm9kZSgpIHtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuICBmdW5jdGlvbiBjb250YWluZXJOb2RlKCkge1xuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cbiAgZnVuY3Rpb24gc2xpZGVOb2RlcygpIHtcbiAgICByZXR1cm4gc2xpZGVzO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgY2FuU2Nyb2xsTmV4dCxcbiAgICBjYW5TY3JvbGxQcmV2LFxuICAgIGNvbnRhaW5lck5vZGUsXG4gICAgaW50ZXJuYWxFbmdpbmUsXG4gICAgZGVzdHJveSxcbiAgICBvZmYsXG4gICAgb24sXG4gICAgZW1pdCxcbiAgICBwbHVnaW5zLFxuICAgIHByZXZpb3VzU2Nyb2xsU25hcCxcbiAgICByZUluaXQsXG4gICAgcm9vdE5vZGUsXG4gICAgc2Nyb2xsTmV4dCxcbiAgICBzY3JvbGxQcmV2LFxuICAgIHNjcm9sbFByb2dyZXNzLFxuICAgIHNjcm9sbFNuYXBMaXN0LFxuICAgIHNjcm9sbFRvLFxuICAgIHNlbGVjdGVkU2Nyb2xsU25hcCxcbiAgICBzbGlkZU5vZGVzLFxuICAgIHNsaWRlc0luVmlldyxcbiAgICBzbGlkZXNOb3RJblZpZXdcbiAgfTtcbiAgYWN0aXZhdGUodXNlck9wdGlvbnMsIHVzZXJQbHVnaW5zKTtcbiAgc2V0VGltZW91dCgoKSA9PiBldmVudEhhbmRsZXIuZW1pdCgnaW5pdCcpLCAwKTtcbiAgcmV0dXJuIHNlbGY7XG59XG5FbWJsYUNhcm91c2VsLmdsb2JhbE9wdGlvbnMgPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCB7IEVtYmxhQ2Fyb3VzZWwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1ibGEtY2Fyb3VzZWwuZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzTnVtYmVyIiwic3ViamVjdCIsImlzU3RyaW5nIiwiaXNCb29sZWFuIiwiaXNPYmplY3QiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJtYXRoQWJzIiwibiIsIk1hdGgiLCJhYnMiLCJtYXRoU2lnbiIsInNpZ24iLCJkZWx0YUFicyIsInZhbHVlQiIsInZhbHVlQSIsImZhY3RvckFicyIsImRpZmYiLCJhcnJheUtleXMiLCJhcnJheSIsIm9iamVjdEtleXMiLCJtYXAiLCJOdW1iZXIiLCJhcnJheUxhc3QiLCJhcnJheUxhc3RJbmRleCIsIm1heCIsImxlbmd0aCIsImFycmF5SXNMYXN0SW5kZXgiLCJpbmRleCIsImFycmF5RnJvbU51bWJlciIsInN0YXJ0QXQiLCJBcnJheSIsImZyb20iLCJfIiwiaSIsIm9iamVjdCIsImtleXMiLCJvYmplY3RzTWVyZ2VEZWVwIiwib2JqZWN0QSIsIm9iamVjdEIiLCJyZWR1Y2UiLCJtZXJnZWRPYmplY3RzIiwiY3VycmVudE9iamVjdCIsImZvckVhY2giLCJrZXkiLCJhcmVPYmplY3RzIiwiaXNNb3VzZUV2ZW50IiwiZXZ0Iiwib3duZXJXaW5kb3ciLCJNb3VzZUV2ZW50IiwiQWxpZ25tZW50IiwiYWxpZ24iLCJ2aWV3U2l6ZSIsInByZWRlZmluZWQiLCJzdGFydCIsImNlbnRlciIsImVuZCIsIm1lYXN1cmUiLCJzZWxmIiwiRXZlbnRTdG9yZSIsImxpc3RlbmVycyIsImFkZCIsIm5vZGUiLCJ0eXBlIiwiaGFuZGxlciIsIm9wdGlvbnMiLCJwYXNzaXZlIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxlZ2FjeU1lZGlhUXVlcnlMaXN0IiwiYWRkTGlzdGVuZXIiLCJwdXNoIiwiY2xlYXIiLCJmaWx0ZXIiLCJyZW1vdmUiLCJBbmltYXRpb25zIiwib3duZXJEb2N1bWVudCIsInVwZGF0ZSIsInJlbmRlciIsImRvY3VtZW50VmlzaWJsZUhhbmRsZXIiLCJ0aW1lU3RlcCIsImxhc3RUaW1lU3RhbXAiLCJsYWciLCJhbmltYXRpb25GcmFtZSIsImluaXQiLCJoaWRkZW4iLCJyZXNldCIsImRlc3Ryb3kiLCJzdG9wIiwiYW5pbWF0ZSIsInRpbWVTdGFtcCIsImVsYXBzZWQiLCJsYWdPZmZzZXQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIkF4aXMiLCJheGlzIiwiZGlyZWN0aW9uIiwic2Nyb2xsIiwiY3Jvc3MiLCJzdGFydEVkZ2UiLCJnZXRTdGFydEVkZ2UiLCJlbmRFZGdlIiwiZ2V0RW5kRWRnZSIsIm1lYXN1cmVTaXplIiwibm9kZVJlY3QiLCJ3aWR0aCIsImhlaWdodCIsIkxpbWl0IiwibWluIiwicmVhY2hlZE1pbiIsInJlYWNoZWRNYXgiLCJyZWFjaGVkQW55IiwiY29uc3RyYWluIiwicmVtb3ZlT2Zmc2V0IiwiY2VpbCIsIkNvdW50ZXIiLCJsb29wIiwibG9vcEVuZCIsImNvdW50ZXIiLCJ3aXRoaW5MaW1pdCIsImdldCIsInNldCIsImNsb25lIiwiRGlyZWN0aW9uIiwiYXBwbHkiLCJEcmFnSGFuZGxlciIsInJvb3ROb2RlIiwidGFyZ2V0IiwiZHJhZ1RyYWNrZXIiLCJsb2NhdGlvbiIsImFuaW1hdGlvbiIsInNjcm9sbFRvIiwic2Nyb2xsQm9keSIsInNjcm9sbFRhcmdldCIsImV2ZW50SGFuZGxlciIsInBlcmNlbnRPZlZpZXciLCJkcmFnRnJlZSIsImRyYWdUaHJlc2hvbGQiLCJza2lwU25hcHMiLCJiYXNlRnJpY3Rpb24iLCJ3YXRjaERyYWciLCJjcm9zc0F4aXMiLCJmb2N1c05vZGVzIiwibm9uUGFzc2l2ZUV2ZW50IiwiaW5pdEV2ZW50cyIsImRyYWdFdmVudHMiLCJnb1RvTmV4dFRocmVzaG9sZCIsInNuYXBGb3JjZUJvb3N0IiwibW91c2UiLCJ0b3VjaCIsImZyZWVGb3JjZUJvb3N0IiwiYmFzZVNwZWVkIiwiaXNNb3ZpbmciLCJzdGFydFNjcm9sbCIsInN0YXJ0Q3Jvc3MiLCJwb2ludGVySXNEb3duIiwicHJldmVudFNjcm9sbCIsInByZXZlbnRDbGljayIsImlzTW91c2UiLCJlbWJsYUFwaSIsImRvd25JZkFsbG93ZWQiLCJkb3duIiwicHJldmVudERlZmF1bHQiLCJ1bmRlZmluZWQiLCJ1cCIsImNsaWNrIiwiYWRkRHJhZ0V2ZW50cyIsIm1vdmUiLCJpc0ZvY3VzTm9kZSIsIm5vZGVOYW1lIiwiaW5jbHVkZXMiLCJmb3JjZUJvb3N0IiwiYm9vc3QiLCJhbGxvd2VkRm9yY2UiLCJmb3JjZSIsInRhcmdldENoYW5nZWQiLCJuZXh0IiwiYmFzZUZvcmNlIiwiYnlEaXN0YW5jZSIsImRpc3RhbmNlIiwiYnlJbmRleCIsImlzTW91c2VFdnQiLCJidXR0b24iLCJidXR0b25zIiwicG9pbnRlckRvd24iLCJ1c2VGcmljdGlvbiIsInVzZUR1cmF0aW9uIiwicmVhZFBvaW50IiwiZW1pdCIsImxhc3RTY3JvbGwiLCJsYXN0Q3Jvc3MiLCJkaWZmU2Nyb2xsIiwiZGlmZkNyb3NzIiwiY2FuY2VsYWJsZSIsInBvaW50ZXJNb3ZlIiwiY3VycmVudExvY2F0aW9uIiwicmF3Rm9yY2UiLCJwb2ludGVyVXAiLCJmb3JjZUZhY3RvciIsInNwZWVkIiwiZnJpY3Rpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJEcmFnVHJhY2tlciIsImxvZ0ludGVydmFsIiwic3RhcnRFdmVudCIsImxhc3RFdmVudCIsInJlYWRUaW1lIiwiZXZ0QXhpcyIsInByb3BlcnR5IiwiY29vcmQiLCJ0b3VjaGVzIiwiZXhwaXJlZCIsImRpZmZEcmFnIiwiZGlmZlRpbWUiLCJpc0ZsaWNrIiwiTm9kZVJlY3RzIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiUGVyY2VudE9mVmlldyIsIlJlc2l6ZUhhbmRsZXIiLCJjb250YWluZXIiLCJzbGlkZXMiLCJ3YXRjaFJlc2l6ZSIsIm5vZGVSZWN0cyIsInJlc2l6ZU9ic2VydmVyIiwiY29udGFpbmVyU2l6ZSIsInNsaWRlU2l6ZXMiLCJkZXN0cm95ZWQiLCJyZWFkU2l6ZSIsImRlZmF1bHRDYWxsYmFjayIsImVudHJpZXMiLCJlbnRyeSIsImlzQ29udGFpbmVyIiwic2xpZGVJbmRleCIsImluZGV4T2YiLCJsYXN0U2l6ZSIsIm5ld1NpemUiLCJkaWZmU2l6ZSIsInJlSW5pdCIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZU5vZGVzIiwiY29uY2F0Iiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJTY3JvbGxCb2R5Iiwib2Zmc2V0TG9jYXRpb24iLCJiYXNlRHVyYXRpb24iLCJib2R5VmVsb2NpdHkiLCJzY3JvbGxEaXJlY3Rpb24iLCJzY3JvbGxEdXJhdGlvbiIsInNjcm9sbEZyaWN0aW9uIiwicmF3TG9jYXRpb24iLCJyYXdMb2NhdGlvblByZXZpb3VzIiwic2VlayIsImlzSW5zdGFudCIsImRpcmVjdGlvbkRpZmYiLCJzZXR0bGVkIiwiZHVyYXRpb24iLCJ2ZWxvY2l0eSIsInVzZUJhc2VEdXJhdGlvbiIsInVzZUJhc2VGcmljdGlvbiIsIlNjcm9sbEJvdW5kcyIsImxpbWl0IiwicHVsbEJhY2tUaHJlc2hvbGQiLCJlZGdlT2Zmc2V0VG9sZXJhbmNlIiwiZnJpY3Rpb25MaW1pdCIsImRpc2FibGVkIiwic2hvdWxkQ29uc3RyYWluIiwiZWRnZSIsImRpZmZUb0VkZ2UiLCJkaWZmVG9UYXJnZXQiLCJzdWJ0cmFjdCIsInRvZ2dsZUFjdGl2ZSIsImFjdGl2ZSIsIlNjcm9sbENvbnRhaW4iLCJjb250ZW50U2l6ZSIsInNuYXBzQWxpZ25lZCIsImNvbnRhaW5TY3JvbGwiLCJwaXhlbFRvbGVyYW5jZSIsInNjcm9sbEJvdW5kcyIsInNuYXBzQm91bmRlZCIsIm1lYXN1cmVCb3VuZGVkIiwic2Nyb2xsQ29udGFpbkxpbWl0IiwiZmluZFNjcm9sbENvbnRhaW5MaW1pdCIsInNuYXBzQ29udGFpbmVkIiwibWVhc3VyZUNvbnRhaW5lZCIsInN0YXJ0U25hcCIsImVuZFNuYXAiLCJsYXN0SW5kZXhPZiIsInNuYXBBbGlnbmVkIiwiaXNGaXJzdCIsImlzTGFzdCIsInNjcm9sbEJvdW5kIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJzbGljZSIsIlNjcm9sbExpbWl0Iiwic2Nyb2xsU25hcHMiLCJTY3JvbGxMb29wZXIiLCJ2ZWN0b3JzIiwiam9pbnRTYWZldHkiLCJzaG91bGRMb29wIiwibG9vcERpc3RhbmNlIiwidiIsIlNjcm9sbFByb2dyZXNzIiwiU2Nyb2xsU25hcHMiLCJhbGlnbm1lbnQiLCJjb250YWluZXJSZWN0Iiwic2xpZGVSZWN0cyIsInNsaWRlc1RvU2Nyb2xsIiwiZ3JvdXBTbGlkZXMiLCJhbGlnbm1lbnRzIiwibWVhc3VyZVNpemVzIiwic25hcHMiLCJtZWFzdXJlVW5hbGlnbmVkIiwibWVhc3VyZUFsaWduZWQiLCJyZWN0cyIsInJlY3QiLCJzbmFwIiwiZyIsIlNsaWRlUmVnaXN0cnkiLCJjb250YWluU25hcHMiLCJzbGlkZUluZGV4ZXMiLCJzbGlkZVJlZ2lzdHJ5IiwiY3JlYXRlU2xpZGVSZWdpc3RyeSIsImdyb3VwZWRTbGlkZUluZGV4ZXMiLCJkb05vdENvbnRhaW4iLCJncm91cCIsImdyb3VwcyIsInJhbmdlIiwiU2Nyb2xsVGFyZ2V0IiwidGFyZ2V0VmVjdG9yIiwibWluRGlzdGFuY2UiLCJkaXN0YW5jZXMiLCJzb3J0IiwiYSIsImIiLCJmaW5kVGFyZ2V0U25hcCIsImFzY0RpZmZzVG9TbmFwcyIsInNjcm9sbFNuYXAiLCJkaWZmVG9TbmFwIiwic2hvcnRjdXQiLCJkMSIsImQyIiwidGFyZ2V0cyIsIm1hdGNoaW5nVGFyZ2V0cyIsInQiLCJ0YXJnZXRTbmFwRGlzdGFuY2UiLCJyZWFjaGVkQm91bmQiLCJzbmFwRGlzdGFuY2UiLCJTY3JvbGxUbyIsImluZGV4Q3VycmVudCIsImluZGV4UHJldmlvdXMiLCJkaXN0YW5jZURpZmYiLCJpbmRleERpZmYiLCJ0YXJnZXRJbmRleCIsIlNsaWRlRm9jdXMiLCJyb290IiwiZXZlbnRTdG9yZSIsImxhc3RUYWJQcmVzc1RpbWUiLCJkb2N1bWVudCIsInJlZ2lzdGVyVGFiUHJlc3MiLCJhZGRTbGlkZUZvY3VzRXZlbnQiLCJldmVudCIsImNvZGUiLCJEYXRlIiwiZ2V0VGltZSIsInNsaWRlIiwiZm9jdXMiLCJub3dUaW1lIiwic2Nyb2xsTGVmdCIsImZpbmRJbmRleCIsImNhcHR1cmUiLCJWZWN0b3IxRCIsImluaXRpYWxWYWx1ZSIsInZhbHVlIiwibm9ybWFsaXplSW5wdXQiLCJUcmFuc2xhdGUiLCJ0cmFuc2xhdGUiLCJ4IiwieSIsImNvbnRhaW5lclN0eWxlIiwic3R5bGUiLCJ0byIsInRyYW5zZm9ybSIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIlNsaWRlTG9vcGVyIiwic2xpZGVTaXplc1dpdGhHYXBzIiwicm91bmRpbmdTYWZldHkiLCJhc2NJdGVtcyIsImRlc2NJdGVtcyIsInJldmVyc2UiLCJsb29wUG9pbnRzIiwic3RhcnRQb2ludHMiLCJlbmRQb2ludHMiLCJyZW1vdmVTbGlkZVNpemVzIiwiaW5kZXhlcyIsInNsaWRlc0luR2FwIiwiZ2FwIiwicmVtYWluaW5nR2FwIiwiZmluZFNsaWRlQm91bmRzIiwiZmluZExvb3BQb2ludHMiLCJpc0VuZEVkZ2UiLCJzbGlkZUJvdW5kcyIsImluaXRpYWwiLCJhbHRlcmVkIiwiYm91bmRFZGdlIiwibG9vcFBvaW50Iiwic2xpZGVMb2NhdGlvbiIsImNhbkxvb3AiLCJldmVyeSIsIm90aGVySW5kZXhlcyIsInNoaWZ0TG9jYXRpb24iLCJTbGlkZXNIYW5kbGVyIiwid2F0Y2hTbGlkZXMiLCJtdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwibXV0YXRpb24iLCJNdXRhdGlvbk9ic2VydmVyIiwiY2hpbGRMaXN0IiwiU2xpZGVzSW5WaWV3IiwidGhyZXNob2xkIiwiaW50ZXJzZWN0aW9uRW50cnlNYXAiLCJpblZpZXdDYWNoZSIsIm5vdEluVmlld0NhY2hlIiwiaW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsInBhcmVudEVsZW1lbnQiLCJjcmVhdGVJblZpZXdMaXN0IiwiaW5WaWV3IiwibGlzdCIsInBhcnNlSW50IiwiaXNJbnRlcnNlY3RpbmciLCJpblZpZXdNYXRjaCIsIm5vdEluVmlld01hdGNoIiwiU2xpZGVTaXplcyIsInJlYWRFZGdlR2FwIiwid2l0aEVkZ2VHYXAiLCJzdGFydEdhcCIsIm1lYXN1cmVTdGFydEdhcCIsImVuZEdhcCIsIm1lYXN1cmVFbmRHYXAiLCJtZWFzdXJlV2l0aEdhcHMiLCJzbGlkZVJlY3QiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIlNsaWRlc1RvU2Nyb2xsIiwiZ3JvdXBCeU51bWJlciIsImJ5TnVtYmVyIiwiZ3JvdXBTaXplIiwiYnlTaXplIiwicmVjdEIiLCJyZWN0QSIsImVkZ2VBIiwiZWRnZUIiLCJnYXBBIiwiZ2FwQiIsImNodW5rU2l6ZSIsImN1cnJlbnRTaXplIiwicHJldmlvdXNTaXplIiwiRW5naW5lIiwic2Nyb2xsQXhpcyIsImNvbnRlbnREaXJlY3Rpb24iLCJzdGFydEluZGV4IiwiaW5WaWV3VGhyZXNob2xkIiwiZHJhZ0hhbmRsZXIiLCJzY3JvbGxMb29wZXIiLCJzbGlkZUxvb3BlciIsImhhc1NldHRsZWQiLCJlbmdpbmUiLCJzdGFydExvY2F0aW9uIiwic2Nyb2xsUHJvZ3Jlc3MiLCJzbGlkZXNJblZpZXciLCJzbGlkZUZvY3VzIiwicmVzaXplSGFuZGxlciIsInNjcm9sbFNuYXBMaXN0Iiwic2xpZGVzSGFuZGxlciIsIkV2ZW50SGFuZGxlciIsImFwaSIsImdldExpc3RlbmVycyIsImUiLCJvbiIsImNiIiwib2ZmIiwiZGVmYXVsdE9wdGlvbnMiLCJicmVha3BvaW50cyIsIk9wdGlvbnNIYW5kbGVyIiwibWVyZ2VPcHRpb25zIiwib3B0aW9uc0EiLCJvcHRpb25zQiIsIm9wdGlvbnNBdE1lZGlhIiwibWF0Y2hlZE1lZGlhT3B0aW9ucyIsIm1lZGlhIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJtZWRpYU9wdGlvbiIsIm9wdGlvbnNNZWRpYVF1ZXJpZXMiLCJvcHRpb25zTGlzdCIsImFjYyIsIm1lZGlhUXVlcmllcyIsIlBsdWdpbnNIYW5kbGVyIiwib3B0aW9uc0hhbmRsZXIiLCJhY3RpdmVQbHVnaW5zIiwicGx1Z2lucyIsInBsdWdpbiIsImFzc2lnbiIsIm5hbWUiLCJFbWJsYUNhcm91c2VsIiwidXNlck9wdGlvbnMiLCJ1c2VyUGx1Z2lucyIsImRlZmF1bHRWaWV3IiwicGx1Z2luc0hhbmRsZXIiLCJtZWRpYUhhbmRsZXJzIiwicmVBY3RpdmF0ZSIsIm9wdGlvbnNCYXNlIiwiZ2xvYmFsT3B0aW9ucyIsInBsdWdpbkxpc3QiLCJwbHVnaW5BcGlzIiwic3RvcmVFbGVtZW50cyIsInVzZXJDb250YWluZXIiLCJ1c2VyU2xpZGVzIiwiY3VzdG9tQ29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsImNoaWxkcmVuIiwiY3VzdG9tU2xpZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImNyZWF0ZUVuZ2luZSIsIm9wdGlvbnNXaXRob3V0TG9vcCIsImFjdGl2YXRlIiwid2l0aE9wdGlvbnMiLCJ3aXRoUGx1Z2lucyIsInF1ZXJ5Iiwib2Zmc2V0UGFyZW50Iiwic2VsZWN0ZWRTY3JvbGxTbmFwIiwiZGVBY3RpdmF0ZSIsImp1bXAiLCJzY3JvbGxOZXh0Iiwic2Nyb2xsUHJldiIsInByZXYiLCJjYW5TY3JvbGxOZXh0IiwiY2FuU2Nyb2xsUHJldiIsInByZXZpb3VzU2Nyb2xsU25hcCIsInNsaWRlc05vdEluVmlldyIsImludGVybmFsRW5naW5lIiwiY29udGFpbmVyTm9kZSIsInNsaWRlTm9kZXMiLCJzZXRUaW1lb3V0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/embla-carousel/esm/embla-carousel.esm.js\n");

/***/ })

};
;